#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516427_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516427 "Data Sheet Main2"
{
	RDLCLayout = './Layouts/DataSheetMain2.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Monthly_Remittance;"Data Sheet Lines-Dist")
		{
			DataItemTableView = where("Deduction type"=filter(Deduction));
			PrintOnlyIfDetail = false;
			RequestFilterFields = "Transaction Date","Payroll No","Data Sheet Header";
			column(ReportForNavId_4645; 4645) {} // Autogenerated by ForNav - Do not delete
			column(PayrollNo_MonthlyRemittance; Monthly_Remittance."Payroll No")
			{
			}
			column(Amount_MonthlyRemittance; Monthly_Remittance.Amount)
			{
			}
			column(Employer_MonthlyRemittance; Monthly_Remittance.Employer)
			{
			}
			column(MemberNo_MonthlyRemittance; Monthly_Remittance."Member No")
			{
			}
			column(Amount1; Amount1)
			{
			}
			column(LoanProductType_MonthlyRemittance; Monthly_Remittance."Loan Product Type")
			{
			}
			column(TransactionType_MonthlyRemittance; Monthly_Remittance."Transaction Type")
			{
			}
			column(DataSheetHeader_MonthlyRemittance; Monthly_Remittance."Data Sheet Header")
			{
			}
			column(Name_MonthlyRemittance; Monthly_Remittance.Name)
			{
			}
			column(TransactionDate_MonthlyRemittance; Monthly_Remittance."Transaction Date")
			{
			}
			column(VARIANCE; VARIANCE)
			{
			}
			column(CheckoffLinesDistributedAmount; CheckoffLinesDistributed.Amount)
			{
			}
			trigger OnPreDataItem();
			begin
				  //CREATETOTALS(SHARES);
			end;
			
			trigger OnAfterGetRecord();
			begin
				// VARIANCE:=Monthly_Remittance."Expected Principal Balance"-Amount;
				// LOANS.RESET;
				//  Loans.SETRANGE(Loans."Client Code",INSURANCE);
				// IF Loans.FIND('-') THEN BEGIN
				//  ADVANCE_P:=Loans."Loan Principle Repayment";
				//  Monthly_Remittance.MODIFY
				//   END;
				// //SHARES:=ADVANCE_P-"Employee Name";
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		VARIANCE:=Monthly_Remittance.Amount-Amount1;
		//  //Amount1:=300;
		//  CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	  REPEAT
		//	 MESSAGE('your name is %1 and type is %2',CheckoffLinesDistributed.Name,CheckoffLinesDistributed."Transaction Type");
		//
		//	 IF CheckoffLinesDistributed."Trans Type"='BENEVOLENT' THEN BEGIN
		//		  Amount1:=100
		//		  END
		//	  UNTIL CheckoffLinesDistributed.NEXT=0;
		//	  END;
		//
		//	   Amount1:=Monthly_Remittance."Deposit Contribution";
		Amount1:=0;
		 CheckoffLinesDistributed.Reset;
		 CheckoffLinesDistributed.SetRange(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		   if CheckoffLinesDistributed.Find('-') then begin
			repeat
			  if Monthly_Remittance."Transaction Type"=Monthly_Remittance."transaction type"::"Benevolent Fund" then begin
			Amount1:=100
			 end;
			 if CheckoffLinesDistributed."Trans Type"='DEPOSITS' then begin
			Amount1:=300;
			   Message('here');
			 end;
			 if CheckoffLinesDistributed."Trans Type"='RESERVE' then begin
			Amount1:=200
			 end;
			//IF CheckoffLinesDistributed."Trans Type"='BENEVOLENT' THEN BEGIN
			//Amount1:=100
			// END;
			  until CheckoffLinesDistributed.Next=0
				  end ;
		//	   CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Trans Type",'RESERVE');
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	 MESSAGE('sdf1');
		//	Amount1:=200
		//		  END ;
		//
		//
		//	   CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Trans Type",'DEPOSITS');
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	 MESSAGE('sdf12');
		//	Amount1:=300
		//		  END ;
			  // Amount1:=0;
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		// MESSAGE('memb no11 is %1',Monthly_Remittance."Payroll No");
		// Amount1:=0;
		// CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",CheckoffLinesDistributed."Member No.");
		// MESSAGE('memb 22no is %1',Monthly_Remittance."Member No");
		// //CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Trans Type",'BENEVOLENT');
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	REPEAT
		//
		//	  IF CheckoffLinesDistributed."Trans Type"='BENEVOLENT' THEN BEGIN
		//	Amount1:=100
		//	 END;
		//	  UNTIL CheckoffLinesDistributed.NEXT=0
		//		  END ;
		//	   CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Trans Type",'RESERVE');
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	 MESSAGE('sdf1');
		//	Amount1:=200
		//		  END ;
		//
		//
		//	   CheckoffLinesDistributed.RESET;
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Member No.",Monthly_Remittance."Member No");
		// CheckoffLinesDistributed.SETRANGE(CheckoffLinesDistributed."Trans Type",'DEPOSITS');
		//   IF CheckoffLinesDistributed.FIND('-') THEN BEGIN
		//	 MESSAGE('sdf12');
		//	Amount1:=300
				 // END ;
			  // Amount1:=0;
		;ReportsForNavPre;
	end;
	var
		LastFieldNo: Integer;
		FooterPrinted: Boolean;
		EmployerS: Record "Sacco Employers";
		EmployerName: Text[50];
		LOANS: Record "Loans Register";
		No: Integer;
		CompanyInfo: Record "Company Information";
		VARIANCE: Decimal;
		DataSheetLinesDist: Record "Data Sheet Lines-Dist";
		CheckoffLinesDistributed: Record "Checkoff Lines-Distributed";
		Amount1: Decimal;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516427_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
