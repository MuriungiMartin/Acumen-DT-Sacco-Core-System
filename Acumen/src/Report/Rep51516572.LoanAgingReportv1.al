#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516572_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516572 "Loan Aging Report v1"
{
	RDLCLayout = './Layouts/LoanAgingReportv1.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Loans Register";"Loans Register")
		{
			DataItemTableView = sorting("Loan  No.") where(Posted=const(true));
			RequestFilterFields = Source,"Loan Product Type","Outstanding Balance","Date filter";
			column(ReportForNavId_4645; 4645) {} // Autogenerated by ForNav - Do not delete
			column(FORMAT_TODAY_0_4_; Format(Today,0,4))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
			{
			}
			column(UserId; UserId)
			{
			}
			column(Loans__Loan__No__; "Loans Register"."Loan  No.")
			{
			}
			column(Loans__Loan_Product_Type_; "Loans Register"."Loan Product Type")
			{
			}
			column(Loans_Loans__Staff_No_; "Loans Register"."Staff No")
			{
			}
			column(ClientCode; "Loans Register"."Client Code")
			{
			}
			column(Loans__Client_Name_; "Loans Register"."Member Name")
			{
			}
			column(Loans_Loans__Outstanding_Balance_; "Loans Register"."Outstanding Balance")
			{
			}
			column(V2Month_; "2Month")
			{
			}
			column(V3Month_; "3Month")
			{
			}
			column(Over3Month; Over3Month)
			{
			}
			column(V1Month_; "1Month")
			{
			}
			column(V0Month_; "0Month")
			{
			}
			column(Loans_Loans__Outstanding_Balance__Control1000000016; "Loans Register"."Outstanding Balance")
			{
			}
			column(Loans__Approved_Amount_; "Loans Register"."Approved Amount")
			{
			}
			column(Loans_Loans__Interest_Due_; "Loans Register"."Interest Due")
			{
			}
			column(V1MonthC_; "1MonthC")
			{
			}
			column(V2MonthC_; "2MonthC")
			{
			}
			column(V3MonthC_; "3MonthC")
			{
			}
			column(Over3MonthC; Over3MonthC)
			{
			}
			column(NoLoans; NoLoans)
			{
			}
			column(GrandTotal; GrandTotal)
			{
			}
			column(V0Month__Control1102760031; "0Month")
			{
			}
			column(V1Month__Control1102760032; "1Month")
			{
			}
			column(V2Month__Control1102760033; "2Month")
			{
			}
			column(V3Month__Control1102760034; "3Month")
			{
			}
			column(Over3Month_Control1102760035; Over3Month)
			{
			}
			column(V0MonthC_; "0MonthC")
			{
			}
			column(Loans_Aging_Analysis__SASRA_Caption; Loans_Aging_Analysis__SASRA_CaptionLbl)
			{
			}
			column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
			{
			}
			column(Loans__Loan__No__Caption; FieldCaption("Loan  No."))
			{
			}
			column(Loan_TypeCaption; Loan_TypeCaptionLbl)
			{
			}
			column(Staff_No_Caption; Staff_No_CaptionLbl)
			{
			}
			column(Loans__Client_Name_Caption; FieldCaption("Member Name"))
			{
			}
			column(Oustanding_BalanceCaption; Oustanding_BalanceCaptionLbl)
			{
			}
			column(PerformingCaption; PerformingCaptionLbl)
			{
			}
			column(V1___30_Days_Caption; V1___30_Days_CaptionLbl)
			{
			}
			column(V0_Days_Caption; V0_Days_CaptionLbl)
			{
			}
			column(WatchCaption; WatchCaptionLbl)
			{
			}
			column(V31___180_Days_Caption; V31___180_Days_CaptionLbl)
			{
			}
			column(SubstandardCaption; SubstandardCaptionLbl)
			{
			}
			column(V181___360_Days_Caption; V181___360_Days_CaptionLbl)
			{
			}
			column(DoubtfulCaption; DoubtfulCaptionLbl)
			{
			}
			column(Over_360_DaysCaption; Over_360_DaysCaptionLbl)
			{
			}
			column(LossCaption; LossCaptionLbl)
			{
			}
			column(TotalsCaption; TotalsCaptionLbl)
			{
			}
			column(CountCaption; CountCaptionLbl)
			{
			}
			column(Grand_TotalCaption; Grand_TotalCaptionLbl)
			{
			}
			column(No; LineNo)
			{
			}
			trigger OnPreDataItem();
			begin
			
				datefilter:='..'+Format(AsAt);
				"Loans Register".SetFilter("Loans Register"."Date filter",datefilter);
			end;
			
			trigger OnAfterGetRecord();
			begin
				"0Month":=0;
				"1Month":=0;
				"2Month":=0;
				"3Month":=0;
				Over3Month:=0;
				GrandTotal:=0;
				LineNo:=0;
				LineNo:=LineNo+1;
				if AsAt = 0D then
				  Error('AS AT  MUST HAVE A VALUE ');
				//AsAt:=CALCDATE('-CY-1D',TODAY);
				//AsAt:=CALCDATE('-1Y',AsAt);
				Evaluate(DFormula,'1Q');
				PrevMonthDate:=CUSurefactory.KnGetPreviousMonthLastDate("Loans Register"."Loan  No.",AsAt);
				Cust.Reset;
				if "Loans Register".Source = "Loans Register".Source::BOSA then
				Cust.SetRange(Cust."No.","Loans Register"."BOSA No")
				else
				Cust.SetRange(Cust."No.","Loans Register"."Client Code");
				if Cust.Find('-') then begin
				Cust.CalcFields(Cust."Current Shares");
				PhoneNo := Cust."Phone No.";
				"StaffNo." := Cust."Personal No";
				Deposits := Cust."Current Shares";
				end;
				"0Month":=0;
				"1Month":=0;
				"2Month":=0;
				"3Month":=0;
				Over3Month:=0;
				//rkk
				ScheduleRepayment:=0;
				LoanPrinciple:=0;
				LoanBalance:=0;
				InterestPay:=0;
				ExpectedAmount:=0;
				MonthsINArrears:=0;
				ScheduleBalance:=0;
				PrinciplePay:=0;
				ScheduleBalance1:=0;
				LoanRepaymentSchedule.Reset;
				LoanRepaymentSchedule.SetRange(LoanRepaymentSchedule."Loan No.","Loans Register"."Loan  No.");
				LoanRepaymentSchedule.SetFilter(LoanRepaymentSchedule."Repayment Date",'<=%1',AsAt);
				if LoanRepaymentSchedule.FindLast then begin
				  "Loans Register".CalcFields("Loans Register"."Outstanding Balance","Loans Register"."Oustanding Interest");
					 ScheduleRepayment:=ROUND(LoanRepaymentSchedule."Monthly Repayment",0.05,'>');
				  ScheduleBalance:=ROUND(LoanRepaymentSchedule."Loan Balance",0.05,'>');
				  if LoanPrinciple = 0 then begin
					LoanPrinciple:="Loans Register"."Approved Amount"/"Loans Register".Installments;
				  end;
				Loans.Reset;
				Loans.SetRange(Loans."Loan  No.","Loans Register"."Loan  No.");
				Loans.SetFilter(Loans."Date filter",'<=%1',AsAt);
				Loans.SetAutocalcFields(Loans."Outstanding Balance",Loans."Oustanding Interest");
				if Loans.Find('-') then begin
				if "Loans Register"."Outstanding Balance" <> 0 then begin
				  LoanBalance:="Loans Register"."Outstanding Balance"
				  end else LoanBalance:=0;
				end;
				  end;
				LoanRepaymentSchedule.Reset;
				LoanRepaymentSchedule.SetRange(LoanRepaymentSchedule."Loan No.","Loans Register"."Loan  No.");
				LoanRepaymentSchedule.SetFilter(LoanRepaymentSchedule."Repayment Date",'<=%1',AsAt);
				if LoanRepaymentSchedule.FindSet then begin
				repeat
				  ScheduleBalance1+=ROUND(LoanRepaymentSchedule."Principal Repayment",1,'<');
				  until LoanRepaymentSchedule.Next = 0;
				   ScheduleBalance:=LoanRepaymentSchedule."Loan Amount"-ScheduleBalance1;
				if ScheduleBalance<=0 then
				ScheduleBalance:=0;
				  end;
				  if LoanBalance <= 0 then
				  ExpectedAmount:=0 else
				 ExpectedAmount:=LoanBalance - ScheduleBalance;
				 if (ExpectedAmount <=0) and (LoanPrinciple>0)  then begin
				 MonthsINArrears:=ROUND((ExpectedAmount/LoanPrinciple),1,'<');
				 "Loans Register".MonthsInAreasNew:=MonthsINArrears;
				 "Loans Register".AmountInAreasNew:=ExpectedAmount;
				 "Loans Register".Modify;
				 end else
				 if (ExpectedAmount>0) and (LoanPrinciple>0) then begin
				 MonthsINArrears:=ROUND((ExpectedAmount/LoanPrinciple),1,'<');
				"Loans Register".MonthsInAreasNew:=MonthsINArrears;
				 "Loans Register".AmountInAreasNew:=ExpectedAmount;
				 "Loans Register".Modify;
				end;
				//rkk
				//"Loans Register".RESET;
				//"Loans Register".SETRANGE("Loans Register"."Date filter",AsAt);
				///IF "Loans Register".FIND('-') THEN BEGIN
				"Loans Register".CalcFields("Loans Register"."Last Pay Date","Loans Register"."Outstanding Balance");
				if MonthsINArrears=0  then begin
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				"Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Perfoming;
				"Loans Register".Modify;
				end else if MonthsINArrears=1  then begin
				"1Month":="Loans Register"."Outstanding Balance";
				"1MonthC":="1MonthC"+1;
				"Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Watch;
				"Loans Register".Modify;
				end else if (MonthsINArrears>1) and (MonthsINArrears<6)  then begin
				"2Month":="Loans Register"."Outstanding Balance";
				"2MonthC":="2MonthC"+1;
				"Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Substandard;
				"Loans Register".Modify;
				end else if (MonthsINArrears>6) and (MonthsINArrears<12) then begin
				"3Month":="Loans Register"."Outstanding Balance";
				"3MonthC":="3MonthC"+1;
				"Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Doubtful;
				"Loans Register".Modify;
				end else if MonthsINArrears>12 then begin
				Over3Month:="Loans Register"."Outstanding Balance";
				Over3MonthC:=Over3MonthC+1;
				"Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Loss;
				"Loans Register".Modify;
				end;
				if (CalcDate('3M',"Loans Register"."Expected Date of Completion"))<AsAt then begin
				  "Loans Register"."Loans CategoryNew":="Loans Register"."loans categorynew"::Loss;
				"Loans Register".Modify;
				end;
				//MESSAGE('%1',"Loans Register"."Loans Category");
				//END;
				GrandTotal:=GrandTotal+"Loans Register"."Outstanding Balance";
				if ("1Month"+"2Month"+"3Month"+Over3Month) > 0 then
				NoLoans:=NoLoans+1;
				if ("0Month" = 0) and ("1Month" = 0) and ("2Month" = 0) and ("3Month" = 0) and (Over3Month = 0) then
				CurrReport.Skip;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field("As At";AsAt)
				{
					ApplicationArea = Basic;
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		"1Month": Decimal;
		"2Month": Decimal;
		"3Month": Decimal;
		Over3Month: Decimal;
		ShowLoan: Boolean;
		AsAt: Date;
		LastDueDate: Date;
		DFormula: DateFormula;
		"0MonthC": Integer;
		"1MonthC": Integer;
		"2MonthC": Integer;
		"3MonthC": Integer;
		Over3MonthC: Integer;
		NoLoans: Integer;
		PhoneNo: Text[30];
		Cust: Record "Member Register";
		"StaffNo.": Text[30];
		Deposits: Decimal;
		GrandTotal: Decimal;
		"0Month": Decimal;
		LoanProduct: Record "Loan Products Setup";
		FirstMonthDate: Date;
		EndMonthDate: Date;
		Loans_Aging_Analysis__SASRA_CaptionLbl: label 'Loans Aging Analysis (SASRA)';
		CurrReport_PAGENOCaptionLbl: label 'Page';
		Loan_TypeCaptionLbl: label 'Loan Type';
		Staff_No_CaptionLbl: label 'Staff No.';
		Oustanding_BalanceCaptionLbl: label 'Oustanding Balance';
		PerformingCaptionLbl: label 'Performing';
		V1___30_Days_CaptionLbl: label '(1 - 30 Days)';
		V0_Days_CaptionLbl: label '(0 Days)';
		WatchCaptionLbl: label 'Watch';
		V31___180_Days_CaptionLbl: label '(31 - 180 Days)';
		SubstandardCaptionLbl: label 'Substandard';
		V181___360_Days_CaptionLbl: label '(181 - 360 Days)';
		DoubtfulCaptionLbl: label 'Doubtful';
		Over_360_DaysCaptionLbl: label 'Over 360 Days';
		LossCaptionLbl: label 'Loss';
		TotalsCaptionLbl: label 'Totals';
		CountCaptionLbl: label 'Count';
		Grand_TotalCaptionLbl: label 'Grand Total';
		LineNo: Integer;
		lSchedule: Record "Loan Repayment Schedule";
		ExpectedAmount: Decimal;
		LoanPrinciple: Decimal;
		MonthsINArrears: Decimal;
		ScheduleRepayment: Decimal;
		LoanRepaymentSchedule: Record "Loan Repayment Schedule";
		PrinciplePay: Decimal;
		ScheduleBalance: Decimal;
		Loans: Record "Loans Register";
		InterestPay: Decimal;
		LoanBalance: Decimal;
		ScheduleBalance1: Decimal;
		CUSurefactory: Codeunit Stopost;
		PrevMonthDate: Date;
		datefilter: Text;

	local procedure CalculateExpectedAmount(LoanNo: Code[40])
	begin
		ScheduleRepayment:=0;
		LoanPrinciple:=0;
		LoanBalance:=0;
		ExpectedAmount:=0;
		LoanRepaymentSchedule.Reset;
		LoanRepaymentSchedule.SetRange(LoanRepaymentSchedule."Loan No.",LoanNo);
		LoanRepaymentSchedule.SetFilter(LoanRepaymentSchedule."Repayment Date",'<=%1',AsAt);
		if LoanRepaymentSchedule.FindLast then begin
		LoanPrinciple:=LoanRepaymentSchedule."Principal Repayment";
		  ScheduleRepayment:=ROUND(LoanRepaymentSchedule."Monthly Repayment",0.05,'>');
		  PrinciplePay:=ROUND(LoanRepaymentSchedule."Monthly Repayment",0.05,'>');
		  //ScheduleInterest:=ROUND(LoanRepaymentSchedule."Monthly Interest");
		  ScheduleBalance:=ROUND(LoanRepaymentSchedule."Loan Balance",0.05,'>');
		  if LoanPrinciple = 0 then begin
			LoanPrinciple:="Loans Register"."Approved Amount"/"Loans Register".Installments;
		  end;
		  "Loans Register".CalcFields("Loans Register"."Outstanding Balance","Loans Register"."Oustanding Interest");
		  if "Loans Register"."Oustanding Interest" >0 then begin
			InterestPay:="Loans Register"."Oustanding Interest";
		  LoanBalance:=("Loans Register"."Outstanding Balance" + InterestPay);
		  end;
		  /*IF LoanBalance > 0 THEN BEGIN
			PeriodOfUnderPayment:=ROUND(LoanBalance/PrinciplePay,1,'>');
			END;*/
		  end;
		LoanRepaymentSchedule.Reset;
		LoanRepaymentSchedule.SetRange(LoanRepaymentSchedule."Loan No.",LoanNo);
		LoanRepaymentSchedule.SetFilter(LoanRepaymentSchedule."Repayment Date",'<=%1',AsAt);
		if LoanRepaymentSchedule.FindSet then begin
		repeat
		  ScheduleBalance1+=ROUND(LoanRepaymentSchedule."Principal Repayment",1,'>');
		  until LoanRepaymentSchedule.Next = 0;
		   ScheduleBalance:=LoanRepaymentSchedule."Loan Amount"-ScheduleBalance1;
		if ScheduleBalance<=0 then
		ScheduleBalance:=0;
		  end;
		 ExpectedAmount:=LoanBalance- ScheduleBalance;

	end;

	local procedure CalculateArrears()
	begin
	end;

	local procedure CalculateMonthsInArrears()
	begin
		if (ExpectedAmount>0) and (LoanPrinciple>0) then begin
		//MESSAGE('here');
		//MonthsINArrears:=0;
		MonthsINArrears:=ROUND((ExpectedAmount/LoanPrinciple),1,'<');
		//MESSAGE('Balance%1ExpectedBalance%2',lSchedule."Loan Balance",MonthsINArrears);
		end;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516572_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
