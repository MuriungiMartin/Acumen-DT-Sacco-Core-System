#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516132_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516132 "Payroll Summary New"
{
	UsageCategory = ReportsAndAnalysis;
	RDLCLayout = './Layouts/PayrollSummaryNew.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("prPeriod Transactions.";"prPeriod Transactions.")
		{
			DataItemTableView = where("Transaction Code"=filter(<>'E009'));
			RequestFilterFields = "Payroll Period";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(CompName; info.Name)
			{
			}
			column(pic; info.Picture)
			{
			}
			column(Addr1; info.Address)
			{
			}
			column(Addr2; info."Address 2")
			{
			}
			column(Email; info."E-Mail")
			{
			}
			column(Year; Year)
			{
			}
			column(PeriodName; PeriodName)
			{
			}
			column(EmployeeCode_prPeriodTransactions; "prPeriod Transactions."."Employee Code")
			{
			}
			column(TransactionCode_prPeriodTransactions; "prPeriod Transactions."."Transaction Code")
			{
			}
			column(GroupText_prPeriodTransactions; "prPeriod Transactions."."Group Text")
			{
			}
			column(TransactionName_prPeriodTransactions; "prPeriod Transactions."."Transaction Name")
			{
			}
			column(Amount_prPeriodTransactions; "prPeriod Transactions.".Amount)
			{
			}
			column(Balance_prPeriodTransactions; "prPeriod Transactions.".Balance)
			{
			}
			column(OriginalAmount_prPeriodTransactions; "prPeriod Transactions."."Original Amount")
			{
			}
			column(GroupOrder_prPeriodTransactions; "prPeriod Transactions."."Group Order")
			{
			}
			column(SubGroupOrder_prPeriodTransactions; "prPeriod Transactions."."Sub Group Order")
			{
			}
			column(PeriodMonth_prPeriodTransactions; "prPeriod Transactions."."Period Month")
			{
			}
			column(PeriodYear_prPeriodTransactions; "prPeriod Transactions."."Period Year")
			{
			}
			column(PeriodFilter_prPeriodTransactions; "prPeriod Transactions."."Period Filter")
			{
			}
			column(PayrollPeriod_prPeriodTransactions; "prPeriod Transactions."."Payroll Period")
			{
			}
			column(Membership_prPeriodTransactions; "prPeriod Transactions.".Membership)
			{
			}
			column(ReferenceNo_prPeriodTransactions; "prPeriod Transactions."."Reference No")
			{
			}
			column(DepartmentCode_prPeriodTransactions; "prPeriod Transactions."."Department Code")
			{
			}
			column(Lumpsumitems_prPeriodTransactions; "prPeriod Transactions.".Lumpsumitems)
			{
			}
			column(TravelAllowance_prPeriodTransactions; "prPeriod Transactions.".TravelAllowance)
			{
			}
			column(GLAccount_prPeriodTransactions; "prPeriod Transactions."."GL Account")
			{
			}
			column(CompanyDeduction_prPeriodTransactions; "prPeriod Transactions."."Company Deduction")
			{
			}
			column(EmpAmount_prPeriodTransactions; "prPeriod Transactions."."Emp Amount")
			{
			}
			column(EmpBalance_prPeriodTransactions; "prPeriod Transactions."."Emp Balance")
			{
			}
			column(JournalAccountCode_prPeriodTransactions; "prPeriod Transactions."."Journal Account Code")
			{
			}
			column(JournalAccountType_prPeriodTransactions; "prPeriod Transactions."."Journal Account Type")
			{
			}
			column(PostAs_prPeriodTransactions; "prPeriod Transactions."."Post As")
			{
			}
			column(LoanNumber_prPeriodTransactions; "prPeriod Transactions."."Loan Number")
			{
			}
			column(coopparameters_prPeriodTransactions; "prPeriod Transactions."."coop parameters")
			{
			}
			column(PayrollCode_prPeriodTransactions; "prPeriod Transactions."."Payroll Code")
			{
			}
			column(PaymentMode_prPeriodTransactions; "prPeriod Transactions."."Payment Mode")
			{
			}
			column(FosaAccountNo_prPeriodTransactions; "prPeriod Transactions."."Fosa Account No.")
			{
			}
			column(employeeName; employeeName)
			{
			}
			trigger OnPreDataItem();
			begin
				if UserSetup.Get(UserId) then
				begin
				if UserSetup."View Payroll"=false then Error ('You dont have permissions for payroll, Contact your system administrator! ')
				end else begin
				Error('You have been setup in the user setup!');
				end;
				SelectedPeriod:=PeriodFilter;
				objPeriod.Reset;
				if objPeriod.Get(SelectedPeriod) then PeriodName:=objPeriod."Period Name";
				info.Get;
				info.CalcFields(Picture);
			end;
			
			trigger OnAfterGetRecord();
			begin
				if HREmployees.Get("prPeriod Transactions."."Employee Code") then
				employeeName:= HREmployees.Firstname+' '+HREmployees.Lastname+' '+HREmployees.Surname;
				if "prPeriod Transactions."."Group Order"=6 then
				  CurrReport.Skip;
				if PeriodTrans.Find('-') then
				   begin
					 Year:=PeriodTrans."Period Year";
				   if PeriodTrans.Amount=0 then
					 CurrReport.Skip;
				   end;
				   if PeriodTrans."Transaction Code"='E009' then
					  CurrReport.Skip;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		HREmployees: Record "Payroll Employee.";
		employeeName: Text;
		info: Record "Company Information";
		CompName: Text[50];
		Addr1: Text[50];
		Addr2: Text[50];
		Email: Text[50];
		UserSetup: Record "User Setup";
		SelectedPeriod: Date;
		objPeriod: Record "Payroll Calender.";
		PeriodFilter: Date;
		PeriodName: Text;
		PeriodTrans: Record "prPeriod Transactions.";
		Year: Integer;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516132_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
