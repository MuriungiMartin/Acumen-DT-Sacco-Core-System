#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516050_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516050 "Provident Schedule"
{
	RDLCLayout = './Layouts/ProvidentSchedule.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Payroll Monthly Transactions";"prPeriod Transactions.")
		{
			column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
			column(No; "Payroll Monthly Transactions"."Employee Code")
			{
			}
			column(EmpName; EmpName)
			{
			}
			column(TName; "Payroll Monthly Transactions"."Transaction Name")
			{
			}
			column(Period; "Payroll Monthly Transactions"."Payroll Period")
			{
			}
			column(Amount; "Payroll Monthly Transactions".Amount)
			{
			}
			column(ProvAmount; ProvAmount)
			{
			}
			column(PeriodFilter; PeriodFilter)
			{
			}
			column(Name; CompanyInfo.Name)
			{
			}
			column(pic; CompanyInfo.Picture)
			{
			}
			column(Address; CompanyInfo.Address)
			{
			}
			column(address2; CompanyInfo."Address 2")
			{
			}
			column(email; CompanyInfo."E-Mail")
			{
			}
			column(Year; Year)
			{
			}
			column(PeriodName; PeriodName)
			{
			}
			trigger OnPreDataItem();
			begin
				"Payroll Monthly Transactions".SetRange("Payroll Monthly Transactions"."Transaction Code",'D001');
				SelectedPeriod:=PeriodFilter;
				objPeriod.Reset;
				if objPeriod.Get(SelectedPeriod) then PeriodName:=objPeriod."Period Name";
			end;
			
			trigger OnAfterGetRecord();
			begin
				if HrEmp.Get("Payroll Monthly Transactions"."Employee Code") then
				  EmpName:=HrEmp.Surname+' '+HrEmp.Firstname+' '+HrEmp.Lastname;
				 // EmpName:=HrEmp.;
				"Payroll Monthly Transactions".SetRange("Payroll Monthly Transactions"."Payroll Period",PeriodFilter);
				ProvAmount:=0;
				//ERROR('%1',"Payroll Monthly Transactions"."Period Filter");
				EmpDed.Reset;
				EmpDed.SetRange(EmpDed."Employee Code","Payroll Monthly Transactions"."Employee Code");
				EmpDed.SetRange(EmpDed."Payroll Period","Payroll Monthly Transactions"."Payroll Period");
				EmpDed.SetRange(EmpDed."Transaction Code",'D001');
				if EmpDed.Find('-') then
				ProvAmount:=EmpDed.Amount;
				if PeriodTrans.Find('-') then
				   begin
				   if PeriodTrans.Amount=0 then CurrReport.Skip;
					 Year:=PeriodTrans."Period Year";
				   end;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(periodfilter;PeriodFilter)
				{
					ApplicationArea = Basic;
					Caption = 'Period Filter';
					TableRelation = "Payroll Calender."."Date Opened";
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		CompanyInfo.Get();
		CompanyInfo.CalcFields(CompanyInfo.Picture);
		;ReportsForNavPre;
	end;
	var
		EmpName: Text[100];
		HrEmp: Record "Payroll Employee.";
		EmpDed: Record "Payroll Employer Deductions.";
		ProvAmount: Decimal;
		CompanyInfo: Record "Company Information";
		PeriodTrans: Record "prPeriod Transactions.";
		Year: Integer;
		SelectedPeriod: Date;
		PeriodFilter: Date;
		objPeriod: Record "Payroll Calender.";
		PeriodName: Text;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516050_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
