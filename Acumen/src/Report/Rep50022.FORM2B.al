#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport50022_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50022 "FORM 2B"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/FORM2B.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Company Information"; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(Name_CompanyInformation; "Company Information".Name)
            {
            }
            column(AsAt; AsAt)
            {
            }
            column(OpeningBankBalance; OpeningBankBalance)
            {
            }
            column(OpeningTreasuryBalance; OpeningTreasuryBalance)
            {
            }
            column(OpeningTillBalance; OpeningTillBalance)
            {
            }
            column(ClosingBankBalance; ClosingBankBalance)
            {
            }
            column(ClosingTreasuryBalance; ClosingTreasuryBalance)
            {
            }
            column(ClosingTillBalance; ClosingTillBalance)
            {
            }
            column(DayDeposits; DayDeposits)
            {
            }
            column(OpeningMobile; OpeningMobile)
            {
            }
            column(ClosingMobile; ClosingMobile)
            {
            }
            column(OpeningFdr; OpeningFdr)
            {
            }
            column(ClosingFdr; ClosingFdr)
            {
            }
            column(BOSADeposits; BOSADeposits)
            {
            }
            column(FOSADeposits; FOSADeposits)
            {
            }
            column(LoanReceipts; LoanReceipts)
            {
            }
            column(Daywithdrawals; Daywithdrawals)
            {
            }
            column(CashPayments; CashPayments)
            {
            }
            column(OtherDeposits; OtherDeposits)
            {
            }
            column(TOTALDEPOSIT; TOTALDEPOSIT)
            {
            }
            column(VDayDeposits; VDayDeposits)
            {
            }
            trigger OnAfterGetRecord();
            begin
                // Normal bank opening balance
                OpeningBankBalance := 0;
                GLAccount.Reset;
                //GLAccount.SETRANGE(GLAccount."FORM 2B",GLAccount."FORM 2B"::"Normal Bank");
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::"Normal Bank");
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', CalcDate('-1D', AsAt));
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        OpeningBankBalance := OpeningBankBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                ClosingBankBalance := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::"Normal Bank");
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        ClosingBankBalance := ClosingBankBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //Treasury balancess
                OpeningTreasuryBalance := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Treasury);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', CalcDate('-1D', AsAt));
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        OpeningTreasuryBalance := OpeningTreasuryBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                ClosingTreasuryBalance := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Treasury);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        ClosingTreasuryBalance := ClosingTreasuryBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //Teller balances
                OpeningTillBalance := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Teller);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', CalcDate('-1D', AsAt));
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        OpeningTillBalance := OpeningTillBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                ClosingTillBalance := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Teller);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        ClosingTillBalance := ClosingTillBalance + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //Deposits from members for loan and interest repayments
                DayDeposits := 0;
                MemberLedger.Reset;
                MemberLedger.SetRange(MemberLedger."Posting Date", AsAt);
                MemberLedger.SetFilter(MemberLedger."Transaction Type", '<>%1', MemberLedger."transaction type"::"Loan Repayment");
                MemberLedger.SetFilter(MemberLedger.Amount, '<%1', 0);
                if MemberLedger.Find('-') then begin
                    repeat
                        //  MemberLedger.CALCSUMS(MemberLedger.Amount);
                        DayDeposits := DayDeposits + MemberLedger.Amount;
                    //DayDeposits:=ABS(DayDeposits);
                    // MESSAGE   ('%1 MemberLedger.Amount',MemberLedger.Amount) ;
                    until MemberLedger.Next = 0;
                end;
                //MemberLedger.RESET;
                //MemberLedger.SETRANGE(MemberLedger."Posting Date",AsAt);
                //MemberLedger.SETFILTER(MemberLedger."Transaction Type",'<>%1|<>%2',MemberLedger."Transaction Type"::Repayment,MemberLedger."Transaction Type"::"Interest Paid");
                //MemberLedger.SETFILTER(MemberLedger.Amount,'<%1',0);
                //IF MemberLedger.FIND('-') THEN BEGIN
                //  REPEAT
                // //  MemberLedger.CALCSUMS(MemberLedger.Amount);
                //   DayDeposits:=DayDeposits+MemberLedger.Amount;
                //   UNTIL MemberLedger.NEXT=0;
                //   END;
                VendorLedger.Reset;
                VendorLedger.SetRange(VendorLedger."Posting Date", AsAt);
                VendorLedger.SetFilter(VendorLedger."Credit Amount", '<>%1', 0);
                if VendorLedger.FindSet then begin
                    Vendor.Get(VendorLedger."Vendor No.");
                    if Vendor."BOSA Account No" <> '' then begin
                        VendorLedger.CalcSums(VendorLedger."Credit Amount");
                        VDayDeposits := VDayDeposits + VendorLedger."Credit Amount";
                    end;
                end;
                //mobile banking float balance
                OpeningMobile := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::"ATM & Mobile");
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', CalcDate('-1D', AsAt));
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        OpeningMobile := OpeningMobile + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                ClosingMobile := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::"ATM & Mobile");
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        ClosingMobile := ClosingMobile + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //Placement with Banks (FDRs, Near Liquid Assets) opening balance
                OpeningFdr := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Placements);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', CalcDate('-1D', AsAt));
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        OpeningFdr := OpeningFdr + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                ClosingFdr := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::Placements);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        ClosingFdr := ClosingFdr + GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //other day receipts
                OtherDeposits := 0;
                DetailedcustLedger.Reset;
                DetailedcustLedger.SetRange(DetailedcustLedger."Posting Date", AsAt);
                DetailedcustLedger.SetFilter(DetailedcustLedger."Credit Amount", '<>%1', 0);
                if DetailedcustLedger.FindSet then begin
                    repeat
                        DetailedcustLedger.CalcSums(DetailedcustLedger."Credit Amount");
                        OtherDeposits := OtherDeposits + DetailedcustLedger."Credit Amount";
                    until DetailedcustLedger.Next = 0;
                end;
                //All loan receipts
                LoanReceipts := 0;
                MemberLedger.Reset;
                MemberLedger.SetRange(MemberLedger."Posting Date", AsAt);
                MemberLedger.SetFilter(MemberLedger."Transaction Type", '%1|%2', MemberLedger."transaction type"::"Loan Repayment", MemberLedger."transaction type"::"Interest Paid");
                if MemberLedger.Find('-') then begin
                    repeat
                        MemberLedger.CalcSums(MemberLedger.Amount);
                        //LoanReceipts:=LoanReceipts+(MemberLedger.Amount);
                        LoanReceipts := LoanReceipts + (MemberLedger."Credit Amount");
                    until MemberLedger.Next = 0;
                end;
                //member day withdrawals
                Daywithdrawals := 0;
                VendorLedger.Reset;
                VendorLedger.SetRange(VendorLedger."Posting Date", AsAt);
                VendorLedger.SetFilter(VendorLedger."Debit Amount", '<>%1', 0);
                if VendorLedger.FindSet then begin
                    // REPEAT
                    Vendor.Get(VendorLedger."Vendor No.");
                    if Vendor."BOSA Account No" <> '' then begin
                        VendorLedger.CalcSums(VendorLedger."Debit Amount");
                        Daywithdrawals := Daywithdrawals + VendorLedger."Debit Amount";
                    end;
                    // UNTIL VendorLedger.NEXT=0;
                end;
                //member day withdrawals
                CashPayments := 0;
                VendorLedger.Reset;
                VendorLedger.SetRange(VendorLedger."Posting Date", AsAt);
                VendorLedger.SetFilter(VendorLedger."Debit Amount", '<>%1', 0);
                if VendorLedger.FindSet then begin
                    //REPEAT
                    Vendor.Get(VendorLedger."Vendor No.");
                    if Vendor."BOSA Account No" = '' then begin
                        VendorLedger.CalcSums(VendorLedger."Debit Amount");
                        CashPayments := CashPayments + VendorLedger."Debit Amount";
                    end;
                    // UNTIL VendorLedger.NEXT=0;
                end;
                //bosa deposits
                BOSADeposits := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::BOSA);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        BOSADeposits := BOSADeposits + (-1 * GLAccount."Balance at Date");
                    until GLAccount.Next = 0;
                end;
                //fosa deposits
                FOSADeposits := 0;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount.FORM2B, GLAccount.Form2b::FOSA);
                GLAccount.SetFilter(GLAccount."Date Filter", '..%1', AsAt);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields(GLAccount."Balance at Date");
                        FOSADeposits := FOSADeposits + (-1 * GLAccount."Balance at Date");
                        TOTALDEPOSIT := 0;
                        TOTALDEPOSIT := BOSADeposits + FOSADeposits;
                    until GLAccount.Next = 0;
                end;
                //  TOTALDEPOSIT:=0;
                //  TOTALDEPOSIT:=BOSADeposits+FOSADeposits;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(AsAt; AsAt)
                {
                    ApplicationArea = Basic;
                    Caption = 'As At';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        AsAt: Date;
        BankAccount: Record "Bank Account";
        OpeningBankBalance: Decimal;
        OpeningTreasuryBalance: Decimal;
        OpeningTillBalance: Decimal;
        OpeningMobile: Decimal;
        GLAccount: Record "G/L Account";
        OpeningFdr: Decimal;
        MemberLedger: Record "Cust. Ledger Entry";
        LoanReceipts: Decimal;
        DayDeposits: Decimal;
        Vendor: Record Vendor;
        VendorLedger: Record "Detailed Vendor Ledg. Entry";
        OtherDeposits: Decimal;
        DetailedcustLedger: Record "Detailed Cust. Ledg. Entry";
        Daywithdrawals: Decimal;
        CashPayments: Decimal;
        ClosingBankBalance: Decimal;
        ClosingTreasuryBalance: Decimal;
        ClosingTillBalance: Decimal;
        ClosingMobile: Decimal;
        ClosingFdr: Decimal;
        BOSADeposits: Decimal;
        FOSADeposits: Decimal;
        TOTALDEPOSIT: Decimal;
        VDayDeposits: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50022_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
