#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516155_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516155 "Other Disclosures"
{
    RDLCLayout = './Layouts/OtherDisclosures.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Company; "Company Information")
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(AsAt; AsAt)
            {
            }
            column(Date; Date)
            {
            }
            column(FinancialYear; FinancialYear)
            {
            }
            column(name; Company.Name)
            {
            }
            column(Grossnonperformingloan; Grossnonperformingloan)
            {
            }
            column(GrossnonperformingloanLast; GrossnonperformingloanLast)
            {
            }
            column(Interestinsuspense; Interestinsuspense)
            {
            }
            column(InterestinsuspenseLast; InterestinsuspenseLast)
            {
            }
            column(Totalnonperformingloan; Totalnonperformingloan)
            {
            }
            column(TotalnonperformingloanLast; TotalnonperformingloanLast)
            {
            }
            column(Directors; Directors)
            {
            }
            column(DirectorsLast; DirectorsLast)
            {
            }
            column(Employees; Employees)
            {
            }
            column(EmployeesLast; EmployeesLast)
            {
            }
            column(Totalinsiderloans; Totalinsiderloans)
            {
            }
            column(TotalinsiderloansLast; TotalinsiderloansLast)
            {
            }
            column(Allowanceforloanloss; Allowanceforloanloss)
            {
            }
            column(Netnonperformingloans; Netnonperformingloans)
            {
            }
            column(AllowanceforloanlossLast; AllowanceforloanlossLast)
            {
            }
            column(NetnonperformingloansLast; NetnonperformingloansLast)
            {
            }
            column(othercontigentliabilities; othercontigentliabilities)
            {
            }
            column(Guaranteesandcommitments; Guaranteesandcommitments)
            {
            }
            column(totalcontingentliabilities; totalcontingentliabilities)
            {
            }
            column(Corecapital; Corecapital)
            {
            }
            column(CorecapitaltoTotalassetratio; CorecapitaltoTotalassetratio)
            {
            }
            column(liquidityRatio; liquidityRatio)
            {
            }
            column(CorecapitalLast; CorecapitalLast)
            {
            }
            column(CorecapitaltoTotalassetratioNew; CorecapitaltoTotalassetratioNew)
            {
            }
            column(CorecapitaltoTotalassetratioNewLast; CorecapitaltoTotalassetratioNewLast)
            {
            }
            column(Excess1; Excess1)
            {
            }
            column(Excess11; Excess11)
            {
            }
            column(Depositsliabilitiesratio; Depositsliabilitiesratio)
            {
            }
            column(DepositsliabilitiesratioLast; DepositsliabilitiesratioLast)
            {
            }
            column(CorecapitalDepositsliabilities; CorecapitalDepositsliabilities)
            {
            }
            column(CorecapitalDepositsliabilitiesLast; CorecapitalDepositsliabilitiesLast)
            {
            }
            column(xcessdeficiency; xcessdeficiency)
            {
            }
            column(xcessdeficiencyLast; xcessdeficiencyLast)
            {
            }
            column(Ratio2; Ratio2)
            {
            }
            column(Ratio; Ratio)
            {
            }
            column(ExcessLiquidity; ExcessLiquidity)
            {
            }
            column(ExcessLiquidityLast; ExcessLiquidityLast)
            {
            }
            column(Minimumstatutoryratio; Minimumstatutoryratio)
            {
            }
            column(Minimumstatutoryratio2; Minimumstatutoryratio2)
            {
            }
            column(Minimumstatutoryratio3; Minimumstatutoryratio3)
            {
            }
            trigger OnPreDataItem();
            begin
                DateFilterNew := '..' + Format(AsAt);
                Date := CalcDate('-CY', AsAt);
                LastYear := CalcDate('-CY-1Y', AsAt);
                EndLastYear := CalcDate('-1Y', AsAt);
                LastYearFilter := '..' + Format(EndLastYear);
                LoanFilterOk := '..' + Format(CalcDate('-1Y', AsAt));
                //LastYearFilter:='..'+FORMAT(EndLastYear);
                suplusfilter := Format(LastYear) + '..' + Format(EndLastYear);
                DateFilter := '..' + Format(AsAt);
                FinancialYear := Date2dmy(Date, 3);
                CurrentYearFilter := Format(Date) + '..' + Format(AsAt);
                NewFiterOk := Format(CalcDate('-CY', EndLastYear)) + '..' + Format(CalcDate('-1Y', AsAt));
                //MESSAGE('%1',NewFiterOk);
            end;

            trigger OnAfterGetRecord();
            begin
                /*
				//gross non performing loan
				LoansRegister.Reset;
				LoansRegister.SetFilter(LoansRegister."Loans Category",'%1|%2|%3',LoansRegister."loans category"::Substandard,LoansRegister."loans category"::Doubtful,LoansRegister."loans category"::Loss);
				LoansRegister.SetFilter(LoansRegister."Date filter",DateFilterNew);
				LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				LoansRegister.SetAutocalcFields("Outstanding Balance");
				if LoansRegister.FindSet then begin
				  repeat
					   Grossnonperformingloan+=LoansRegister."Outstanding Balance";
					until LoansRegister.Next = 0;
					end;
					LoansRegister.Reset;
				LoansRegister.SetFilter(LoansRegister."Loans CategoryNew",'%1|%2|%3',LoansRegister."loans categorynew"::Substandard,LoansRegister."loans categorynew"::Doubtful,LoansRegister."loans categorynew"::Loss);
				LoansRegister.SetFilter(LoansRegister."Date filter",LastYearFilter);
				LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				LoansRegister.SetAutocalcFields("Outstanding Balance");
				if LoansRegister.FindSet then begin
				  repeat
					GrossnonperformingloanLast+=LoansRegister."Outstanding Balance";
					until LoansRegister.Next = 0;
					end;
					//MESSAGE('%1|%2',Grossnonperformingloan,GrossnonperformingloanLast);
				//interest in suspense
				LoansRegister.Reset;
				LoansRegister.SetFilter(LoansRegister."Loans Category",'%1|%2|%3',LoansRegister."loans category"::Substandard,LoansRegister."loans category"::Doubtful,LoansRegister."loans category"::Loss);
				LoansRegister.SetFilter(LoansRegister."Date filter",DateFilterNew);
				LoansRegister.SetFilter(LoansRegister."Oustanding Interest",'<>%1',0);
				LoansRegister.SetAutocalcFields("Oustanding Interest");
				if LoansRegister.FindSet then begin
				  repeat
					Interestinsuspense+=LoansRegister."Oustanding Interest";
					until LoansRegister.Next = 0;
					end;
				  LoansRegister.Reset;
				LoansRegister.SetFilter(LoansRegister."Loans CategoryNew",'%1|%2|%3',LoansRegister."loans categorynew"::Substandard,LoansRegister."loans categorynew"::Doubtful,LoansRegister."loans categorynew"::Loss);
				LoansRegister.SetFilter(LoansRegister."Date filter",LastYearFilter);
				LoansRegister.SetFilter(LoansRegister."Oustanding Interest",'<>%1',0);
				LoansRegister.SetRange(LoansRegister.Posted,true);
				LoansRegister.SetAutocalcFields("Oustanding Interest","Outstanding Balance");
				if LoansRegister.FindSet then begin
				  repeat
					if LoansRegister."Outstanding Balance"<> 0 then
					InterestinsuspenseLast+=LoansRegister."Oustanding Interest";
					until LoansRegister.Next = 0;
					end;
				//insider loans
				SaccoInsiders.Reset;
				SaccoInsiders.SetFilter(SaccoInsiders."Position in society",'%1',SaccoInsiders."position in society"::Staff);
				if SaccoInsiders.FindSet then begin
				  repeat
				  LoansRegister.Reset;
				  LoansRegister.SetFilter(LoansRegister."Date filter",DateFilterNew);
				  LoansRegister.SetRange(LoansRegister."Client Code",SaccoInsiders.MemberNo);
				  LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				  LoansRegister.SetAutocalcFields("Outstanding Balance");
				  if LoansRegister.FindSet then begin
					repeat
					  //MESSAGE(FORMAT(LoansRegister."Client Code"));
					  Employees+=LoansRegister."Outstanding Balance";
					  until LoansRegister.Next =0;
					end;
					until SaccoInsiders.Next =0;
				  end;
				SaccoInsiders.Reset;
				SaccoInsiders.SetFilter(SaccoInsiders."Position in society",'%1',SaccoInsiders."position in society"::Staff);
				if SaccoInsiders.FindSet then begin
				  repeat
				  LoansRegister.Reset;
				  //LoansRegister.SETFILTER(LoansRegister."Date filter",LastYearFilter);
				  LoansRegister.SetFilter(LoansRegister."Date filter",LoanFilterOk);
				  LoansRegister.SetRange(LoansRegister."Client Code",SaccoInsiders.MemberNo);
				  LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				  LoansRegister.SetAutocalcFields("Outstanding Balance");
				  if LoansRegister.FindSet then begin
					repeat
					  //MESSAGE(FORMAT(LoansRegister."Client Code"));
					  EmployeesLast+=LoansRegister."Outstanding Balance";
					  until LoansRegister.Next =0;
					end;
					until SaccoInsiders.Next = 0;
				  end;
				  //directors
				SaccoInsiders.Reset;
				SaccoInsiders.SetFilter(SaccoInsiders."Position in society",'%1|%2',SaccoInsiders."position in society"::Board,SaccoInsiders."position in society"::Supervisory);
				if SaccoInsiders.FindSet then begin
				  repeat
				  LoansRegister.Reset;
				LoansRegister.SetFilter(LoansRegister."Date filter",DateFilterNew);
				  LoansRegister.SetRange(LoansRegister."Client Code",SaccoInsiders.MemberNo);
				  LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				  LoansRegister.SetAutocalcFields("Outstanding Balance");
				  if LoansRegister.FindSet then begin
					repeat
					  //MESSAGE(FORMAT(LoansRegister."Client Code"));
					  Directors+=LoansRegister."Outstanding Balance";
					  until LoansRegister.Next =0;
					end;
					until SaccoInsiders.Next = 0;
				  end;
				SaccoInsiders.Reset;
				SaccoInsiders.SetFilter(SaccoInsiders."Position in society",'%1|%2',SaccoInsiders."position in society"::Board,SaccoInsiders."position in society"::Supervisory);
				if SaccoInsiders.FindSet then begin
				  repeat
				  LoansRegister.Reset;
				  LoansRegister.SetFilter(LoansRegister."Date filter",LastYearFilter);
				  LoansRegister.SetRange(LoansRegister."Client Code",SaccoInsiders.MemberNo);
				  LoansRegister.SetFilter(LoansRegister."Outstanding Balance",'<>%1',0);
				  LoansRegister.SetAutocalcFields("Outstanding Balance");
				  if LoansRegister.FindSet then begin
					repeat
					  DirectorsLast+=LoansRegister."Outstanding Balance";
					  until LoansRegister.Next =0;
					end;
					until SaccoInsiders.Next = 0;
				  end;
				//allowance for loan loss
				Allowanceforloanloss:=0;
				GLAccount.Reset;
				GLAccount.SetFilter(GLAccount."Form 2H other disc",'%1',GLAccount."form 2h other disc"::AllowanceForLoanLoss);
				if GLAccount.FindSet then begin
				  repeat
					GLEntry.Reset;
					GLEntry.SetRange(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SetFilter(GLEntry."Posting Date",DateFilterNew);
					if GLEntry.FindSet then begin
					  GLEntry.CalcSums(Amount);
					  Allowanceforloanloss+=GLEntry.Amount;
					  end;
					  until GLAccount.Next = 0 ;
				end;
				Allowanceforloanloss:=0;
				GLAccount.Reset;
				GLAccount.SetFilter(GLAccount."Form 2H other disc",'%1',GLAccount."form 2h other disc"::AllowanceForLoanLoss);
				if GLAccount.FindSet then begin
				  repeat
					GLEntry.Reset;
					GLEntry.SetRange(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SetFilter(GLEntry."Posting Date",LastYearFilter);
					if GLEntry.FindSet then begin
					  GLEntry.CalcSums(Amount);
					  AllowanceforloanlossLast+=GLEntry.Amount;
					  end;
					  until GLAccount.Next = 0 ;
				end;
				Totalnonperformingloan:=Grossnonperformingloan-Interestinsuspense;
				TotalnonperformingloanLast:=GrossnonperformingloanLast-InterestinsuspenseLast;
				Totalinsiderloans:=Employees+Directors;
				TotalinsiderloansLast:=EmployeesLast+DirectorsLast;
				Netnonperformingloans:=Totalnonperformingloan-Allowanceforloanloss;
				NetnonperformingloansLast:=TotalnonperformingloanLast-AllowanceforloanlossLast;
				Minimumstatutoryratio:=0.08;
				Minimumstatutoryratio2:=0.05;
				Minimumstatutoryratio3:=0.1;
				/*
				//CORE CAPITAL
				GLAccount.RESET;
				GLAccount.SETFILTER(GLAccount."Form 2H other disc",'%1',GLAccount."Form 2H other disc"::Core_Capital);
				IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLEntry.RESET;
					GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SETFILTER(GLEntry."Posting Date",DateFilter);
					IF GLEntry.FINDSET THEN BEGIN
					  GLEntry.CALCSUMS(Amount);
					  Corecapital+=GLEntry.Amount*-1;
					  END;
					  UNTIL GLAccount.NEXT = 0 ;
				END;
				GLAccount.RESET;
				GLAccount.SETFILTER(GLAccount."Form 2H other disc",'%1',GLAccount."Form 2H other disc"::Core_Capital);
				IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLEntry.RESET;
					GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SETFILTER(GLEntry."Posting Date",LastYearFilter);
					IF GLEntry.FINDSET THEN BEGIN
					  GLEntry.CALCSUMS(Amount);
					  CorecapitalLast+=GLEntry.Amount*-1;
					  END;
					  UNTIL GLAccount.NEXT = 0 ;
				END;
				GLAccount.RESET;
				GLAccount.SETRANGE(GLAccount."No.",'101799');
				GLAccount.SETFILTER(GLAccount."Date Filter",DateFilter);
				IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLAccount.CALCFIELDS("Balance at Date");
					BalancesheetAssets+=GLAccount."Balance at Date";
					//MESSAGE(FORMAT(BalancesheetAssets));
				UNTIL GLAccount.NEXT =0 ;
				END;
				GLAccount.RESET;
				GLAccount.SETRANGE(GLAccount."No.",'101799');
				GLAccount.SETFILTER(GLAccount."Date Filter",LastYearFilter);
				IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLAccount.CALCFIELDS("Balance at Date");
					BalancesheetAssetsLast+=GLAccount."Balance at Date";
				UNTIL GLAccount.NEXT =0 ;
				END;
				//deposit liabilites
				 GLAccount.RESET;
				 GLAccount.SETFILTER(GLAccount."Form 2H other disc",'%1',GLAccount."Form 2H other disc"::"Deposits liabilities");
				 IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLEntry.RESET;
					GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SETFILTER(GLEntry."Posting Date",DateFilter);
					IF GLEntry.FINDSET THEN BEGIN
					  GLEntry.CALCSUMS(Amount);
					  Depositsliabilitiesratio+=GLEntry.Amount*-1;
					  END;
				   UNTIL GLAccount.NEXT = 0;
				 END;
				  GLAccount.RESET;
				 GLAccount.SETFILTER(GLAccount."Form 2H other disc",'%1',GLAccount."Form 2H other disc"::"Deposits liabilities");
				 IF GLAccount.FINDSET THEN BEGIN
				  REPEAT
					GLEntry.RESET;
					GLEntry.SETRANGE(GLEntry."G/L Account No.",GLAccount."No.");
					GLEntry.SETFILTER(GLEntry."Posting Date",LastYearFilter);
					IF GLEntry.FINDSET THEN BEGIN
					  GLEntry.CALCSUMS(Amount);
					  DepositsliabilitiesratioLast+=GLEntry.Amount*-1;
					  END;
				   UNTIL GLAccount.NEXT = 0;
				 END;
				 CorecapitaltoTotalassetratioNew:=Corecapital/BalancesheetAssets;
				 CorecapitaltoTotalassetratioNewLast:=CorecapitalLast/BalancesheetAssetsLast;
				 Maximumstatutoryratio:=0.08;
				 Excess1:=(CorecapitaltoTotalassetratioNew-Maximumstatutoryratio);
				 Excess11:=(CorecapitaltoTotalassetratioNewLast-Maximumstatutoryratio);
				// MESSAGE(FORMAT(CorecapitaltoTotalassetratioNew));
				// MESSAGE(FORMAT(CorecapitaltoTotalassetratioNewLast));
				 CorecapitalDepositsliabilities:=Corecapital/Depositsliabilitiesratio;
				 CorecapitalDepositsliabilitiesLast:=CorecapitalLast/DepositsliabilitiesratioLast;
				 xcessdeficiency:=(CorecapitalDepositsliabilities-0.05);
				 xcessdeficiencyLast:=(CorecapitalDepositsliabilitiesLast-0.08);
                //new
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", '101799');
                GLAccount.SetFilter(GLAccount."Date Filter", DateFilter);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields("Balance at Date");
                        BalancesheetAssets += GLAccount."Balance at Date";
                    //MESSAGE(FORMAT(BalancesheetAssets));
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", '101799');
                GLAccount.SetFilter(GLAccount."Date Filter", LastYearFilter);
                if GLAccount.FindSet then begin
                    repeat
                        GLAccount.CalcFields("Balance at Date");
                        BalancesheetAssetsLast += GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //deposit liabilites
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::TotalDepositsLiabilities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Depositsliabilitiesratio += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::TotalDepositsLiabilities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            DepositsliabilitiesratioLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //end new
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::ShareCapital);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            ShareCapital += GLEntry.Amount * -1;
                        end;
                    //ShareCapital:=ShareCapital+ShareCapitalValue;
                    until GLAccount.Next = 0;
                end;
                //statutory reserve
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::StatutoryReserve);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            StatutoryReserve += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //retained earnings
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::RetainedEarnings);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            retainedEarnins += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //curent year surplus
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::NetSurplusaftertax);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", CurrentYearFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            NetSurplusaftertax += (GLEntry.Amount * 50 / 100) * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::LoansandAdvances);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            LoansandAdvances += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //total assets as per the balance sheet
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", '101799');
                GLAccount.SetFilter(GLAccount."Date Filter", DateFilter);
                GLAccount.SetAutocalcFields(Balance);
                if GLAccount.FindSet then begin
                    repeat
                        totalassetsPBSheet += GLAccount."Balance at Date";
                    until GLAccount.Next = 0;
                end;
                //Cash (Local + Foreign Currency)
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Cash);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Cash += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //INVESTMENT IN SUBSIDIARY
                InvestmentsinSubsidiary := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::InvestmentsinSubsidiary);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            InvestmentsinSubsidiary += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Other reserves
                Otherreserves := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Otherreserves);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Otherreserves += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gov securities
                GovernmentSecurities := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::GovernmentSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            GovernmentSecurities += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //balances at other institutions
                DepositsandBalancesatOtherInstitutions := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::DepositsandBalancesatOtherInstitutions);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            DepositsandBalancesatOtherInstitutions += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //other assets
                Otherassets := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Otherassets);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            Otherassets += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //property and equipment
                PropertyandEquipment := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::"PropertyandEquipment ");
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PropertyandEquipment += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //deposit liabilities
                //TotalDepositsLiabilities:=0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::TotalDepositsLiabilities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TotalDepositsLiabilities += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //investment
                //TotalDepositsLiabilities:=0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Investments);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            investment += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                // TOTALOnBalanceSheet:=Cash+GovernmentSecurities+DepositsandBalancesatOtherInstitutions+LoansandAdvances+InvestmentsinSubsidiary+Otherassets+PropertyandEquipment+investment;
                // Sub_Total:=ShareCapital+CapitalGrants+retainedEarnins+NetSurplusaftertax+StatutoryReserve+Otherreserves;
                // TotalDeductions:=InvestmentsinSubsidiary+OtherDeductions;
                // CORECAPITAL:=Sub_Total-TotalDeductions;
                TOTALOnBalanceSheet := Cash + GovernmentSecurities + DepositsandBalancesatOtherInstitutions + LoansandAdvances + InvestmentsinSubsidiary + Otherassets + PropertyandEquipment;
                Sub_Total := ShareCapital + CapitalGrants + retainedEarnins + NetSurplusaftertax + StatutoryReserve + Otherreserves;
                TotalDeductions := InvestmentsinSubsidiary + OtherDeductions;
                Corecapital := (Sub_Total - TotalDeductions);
                //corecapital last year
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::ShareCapital);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            ShareCapitalLast += GLEntry.Amount * -1;
                        end;
                    //ShareCapital:=ShareCapital+ShareCapitalValue;
                    until GLAccount.Next = 0;
                end;
                //statutory reserve
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::StatutoryReserve);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            StatutoryReserveLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //retained earnings
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::RetainedEarnings);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            retainedEarninsLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //curent year surplus
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::NetSurplusaftertax);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", NewFiterOk); //rkK
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            NetSurplusaftertaxLast += (GLEntry.Amount * 50 / 100) * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::LoansandAdvances);
                if GLAccount.FindSet then begin
                    repeat
                        ShareCapitalValue := 0;
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            LoansandAdvanceslast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //total assets as per the balance sheet
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", '101799');
                GLAccount.SetFilter(GLAccount."Date Filter", DateFilter);
                GLAccount.SetAutocalcFields(Balance);
                if GLAccount.FindSet then begin
                    repeat
                        totalassetsPBSheetLast += GLAccount.Balance;
                    until GLAccount.Next = 0;
                end;
                //Cash (Local + Foreign Currency)
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Cash);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            CashLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //INVESTMENT IN SUBSIDIARY
                InvestmentsinSubsidiary := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::InvestmentsinSubsidiary);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            InvestmentsinSubsidiaryLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //Other reserves
                Otherreserves := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Otherreserves);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherreservesLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gov securities
                GovernmentSecurities := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::GovernmentSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            GovernmentSecuritiesLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //balances at other institutions
                DepositsandBalancesatOtherInstitutions := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::DepositsandBalancesatOtherInstitutions);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            DepositsandBalancesatOtherInstitutionsLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //other assets
                Otherassets := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Otherassets);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            OtherassetsLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //property and equipment
                PropertyandEquipment := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::"PropertyandEquipment ");
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            PropertyandEquipmentLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //deposit liabilities
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::TotalDepositsLiabilities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TotalDepositsLiabilitiesLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;
                //investment
                //TotalDepositsLiabilities:=0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount."Capital adequecy", '%1', GLAccount."capital adequecy"::Investments);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            investmentlAT += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                // TOTALOnBalanceSheet:=Cash+GovernmentSecurities+DepositsandBalancesatOtherInstitutions+LoansandAdvances+InvestmentsinSubsidiary+Otherassets+PropertyandEquipment+investment;
                // Sub_Total:=ShareCapital+CapitalGrants+retainedEarnins+NetSurplusaftertax+StatutoryReserve+Otherreserves;
                // TotalDeductions:=InvestmentsinSubsidiary+OtherDeductions;
                // CORECAPITAL:=Sub_Total-TotalDeductions;
                TOTALOnBalanceSheetLast := CashLast + GovernmentSecuritiesLast + DepositsandBalancesatOtherInstitutionsLast + LoansandAdvanceslast + InvestmentsinSubsidiaryLast + OtherassetsLast + PropertyandEquipmentLast;
                Sub_TotalLast := ShareCapitalLast + CapitalGrantsLast + retainedEarninsLast + NetSurplusaftertaxLast + StatutoryReserveLast + OtherreservesLast;
                TotalDeductionsLast := InvestmentsinSubsidiaryLast + OtherDeductionsLast;
                CorecapitalLast := (Sub_TotalLast - TotalDeductionsLast);
                CorecapitaltoTotalassetratioNew := Corecapital / BalancesheetAssets;
                CorecapitaltoTotalassetratioNewLast := CorecapitalLast / BalancesheetAssetsLast;
                Maximumstatutoryratio := 0.08;
                Excess1 := (CorecapitaltoTotalassetratioNew - Maximumstatutoryratio);
                Excess11 := (CorecapitaltoTotalassetratioNewLast - Maximumstatutoryratio);
                CorecapitalDepositsliabilities := Corecapital / Depositsliabilitiesratio;
                CorecapitalDepositsliabilitiesLast := CorecapitalLast / DepositsliabilitiesratioLast;
                xcessdeficiency := (CorecapitalDepositsliabilities - 0.05);
                xcessdeficiencyLast := (CorecapitalDepositsliabilitiesLast - 0.08);
                // //liquidity ratio
                LocalNotes := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::LocalNotes);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            LocalNotes += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::LocalNotes);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            LocalNotesLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                BalanceswithCommercialBanks := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::BankBalances);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithCommercialBanks += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::BankBalances);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithCommercialBanksLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //gov securities
                TreasuryBills := 0;
                TreasuryBonds := 0;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::GovSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TreasuryBills += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::GovSecurities);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TreasuryBillsLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //balances with other financial institution
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::balanceswithotherfinancialinsti);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithotherFinancialInstitutions += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::balanceswithotherfinancialinsti);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            BalanceswithotherFinancialInstitutionsLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                    //total liabilities
                    // GLAccount.RESET;
                    // GLAccount.SETRANGE(GLAccount."No.",'20199');
                    // IF GLAccount.FINDFIRST THEN BEGIN
                    //  GLAccount.CALCFIELDS(Balance);
                    //  TotalOtherliabilitiesNew:=GLAccount.Balance;
                    // // MESSAGE('%1',TotalOtherliabilities);
                    //  END;
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TotalOtherliabilitiesNew);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TotalOtherliabilitiesNew += GLEntry.Amount * -1;
                            // MESSAGE('%1',TotalOtherliabilitiesNew);
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TotalOtherliabilitiesNew);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TotalOtherliabilitiesNewLast += GLEntry.Amount * -1;
                        end;
                    until GLAccount.Next = 0;
                end;//20199
                    //time deposits
                    //time deposits
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TimeDeposits);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", DateFilter);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TimeDeposits += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                //time deposits
                GLAccount.Reset;
                GLAccount.SetFilter(GLAccount.Liquidity, '%1', GLAccount.Liquidity::TimeDeposits);
                if GLAccount.FindSet then begin
                    repeat
                        GLEntry.Reset;
                        GLEntry.SetRange(GLEntry."G/L Account No.", GLAccount."No.");
                        GLEntry.SetFilter(GLEntry."Posting Date", LoanFilterOk);
                        if GLEntry.FindSet then begin
                            GLEntry.CalcSums(Amount);
                            TimeDepositsLast += GLEntry.Amount;
                        end;
                    until GLAccount.Next = 0;
                end;
                NETLIQUIDASSETS :=
                LocalNotes + ForeignNotes + BalancesduetoFinanciaInstitutions + BalancesDuetootherSaccosocieties + BalanceswithCommercialBanks + BalanceswithotherFinancialInstitutions + BalanceswithotherSaccoSocieties + TreasuryBills + TreasuryBonds + TimeDeposits
                + OverdraftsandMatured;
                //MESSAGE('%1|%2|%3',NETLIQUIDASSETS,TotalOtherliabilitiesNew,BalanceswithCommercialBanks);
                NETLIQUIDASSETSLst :=
                LocalNotesLast + ForeignNotes + BalancesduetoFinanciaInstitutionsLast + BalancesDuetootherSaccosocieties + BalanceswithCommercialBanksLast + BalanceswithotherFinancialInstitutionsLast + BalanceswithotherSaccoSocieties + TreasuryBillsLast + TreasuryBonds
                + TimeDepositsLast + OverdraftsandMatured;
                // TotalOtherliabilities:=MaturedLiabilities+LiabilitiesMaturingwithin91Days;
                Ratio := NETLIQUIDASSETS / TotalOtherliabilitiesNew;
                Ratio2 := NETLIQUIDASSETSLst / TotalOtherliabilitiesNewLast;
                ExcessLiquidityLast := (Ratio2) - (10 / 100);
                ExcessLiquidity := Ratio - (10 / 100);
				*/

            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field(AsAt; AsAt)
                {
                    ApplicationArea = Basic;
                    Caption = 'AsAt';
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        DateFilter: Text;
        DateFilterNew: Text;
        Date: Date;
        investment: Decimal;
        investmentlAT: Decimal;
        NewFiterOk: Text;
        LoanFilterOk: Text;
        DateFilterCurrent: Text;
        TimeDepositsLast: Decimal;
        FinancialYear: Integer;
        NETLIQUIDASSETS: Decimal;
        Maximumstatutoryratio: Decimal;
        TimeDeposits: Decimal;
        ExcessLiquidity: Decimal;
        BalanceswithotherFinancialInstitutionsLast: Decimal;
        NETLIQUIDASSETSLst: Decimal;
        Ratio: Decimal;
        ExcessLiquidityLast: Decimal;
        Ratio2: Decimal;
        BalanceswithotherSaccoSocieties: Decimal;
        BalancesduetoFinanciaInstitutions: Decimal;
        BalancesduetoFinanciaInstitutionsLast: Decimal;
        BalancesDuetootherSaccosocieties: Decimal;
        OverdraftsandMatured: Decimal;
        ForeignNotes: Decimal;
        TreasuryBillsLast: Decimal;
        BalanceswithCommercialBanksLast: Decimal;
        LocalNotesLast: Decimal;
        LocalNotes: Decimal;
        AsAt: Date;
        BalanceswithCommercialBanks: Decimal;
        BalanceswithotherFinancialInstitutions: Decimal;
        TotalOtherliabilitiesNew: Decimal;
        TotalOtherliabilitiesNewLast: Decimal;
        TreasuryBonds: Decimal;
        TreasuryBills: Decimal;
        LastYear: Date;
        CorecapitaltoTotalassetratioNew: Decimal;
        CorecapitaltoTotalassetratioNewLast: Decimal;
        Excess1: Decimal;
        xcessdeficiency: Decimal;
        xcessdeficiencyLast: Decimal;
        Excess11: Decimal;
        CorecapitalDepositsliabilities: Decimal;
        CorecapitalDepositsliabilitiesLast: Decimal;
        Depositsliabilitiesratio: Decimal;
        DepositsliabilitiesratioLast: Decimal;
        EndLastYear: Date;
        LastYearFilter: Text;
        suplusfilter: Text;
        GovernmentSecuritiesLast: Decimal;
        Grossnonperformingloan: Decimal;
        DepositsandBalancesatOtherInstitutionsLast: Decimal;
        CorecapitalLast: Decimal;
        TOTALOnBalanceSheetLast: Decimal;
        Sub_TotalLast: Decimal;
        BalancesheetAssetsLast: Decimal;
        CapitalGrants: Decimal;
        PropertyandEquipmentLast: Decimal;
        OtherassetsLast: Decimal;
        TotalDeductionsLast: Decimal;
        BalancesheetAssets: Decimal;
        LoansRegister: Record "Loans Register";
        GrossnonperformingloanLast: Decimal;
        Interestinsuspense: Decimal;
        InterestinsuspenseLast: Decimal;
        CapitalGrantsLast: Decimal;
        InvestmentsinSubsidiaryLast: Decimal;
        TotalDepositsLiabilitiesLast: Decimal;
        OtherDeductionsLast: Decimal;
        Totalnonperformingloan: Decimal;
        OtherDeductions: Decimal;
        TotalnonperformingloanLast: Decimal;
        Directors: Decimal;
        DirectorsLast: Decimal;
        Employees: Decimal;
        ShareCapitalLast: Decimal;
        StatutoryReserveLast: Decimal;
        EmployeesLast: Decimal;
        Totalinsiderloans: Decimal;
        TotalinsiderloansLast: Decimal;
        Allowanceforloanloss: Decimal;
        AllowanceforloanlossLast: Decimal;
        NetSurplusaftertaxLast: Decimal;
        LoansandAdvanceslast: Decimal;
        totalassetsPBSheetLast: Decimal;
        Netnonperformingloans: Decimal;
        retainedEarninsLast: Decimal;
        OtherreservesLast: Decimal;
        NetnonperformingloansLast: Decimal;
        GLAccount: Record "G/L Account";
        GLEntry: Record "G/L Entry";
        othercontigentliabilities: Decimal;
        Guaranteesandcommitments: Decimal;
        totalcontingentliabilities: Decimal;
        CashLast: Decimal;
        Corecapital: Decimal;
        CorecapitaltoTotalassetratio: Decimal;
        liquidityRatio: Decimal;
        ShareCapitalValue: Decimal;
        ShareCapital: Decimal;
        StatutoryReserve: Decimal;
        retainedEarnins: Decimal;
        NetSurplusaftertax: Decimal;
        LoansandAdvances: Decimal;
        totalassetsPBSheet: Decimal;
        GovernmentSecurities: Decimal;
        Cash: Decimal;
        InvestmentsinSubsidiary: Decimal;
        Otherreserves: Decimal;
        DepositsandBalancesatOtherInstitutions: Decimal;
        Otherassets: Decimal;
        PropertyandEquipment: Decimal;
        TotalDepositsLiabilities: Decimal;
        Sub_Total: Decimal;
        TOTALOnBalanceSheet: Decimal;
        TotalDeductions: Decimal;
        CurrentYearFilter: Text;
        // SaccoInsiders: Record UnknownRecord51516017;
        LoanRepaymentSchedule: Record "Loan Repayment Schedule";
        ScheduleRepayment: Decimal;
        ScheduleBalance: Decimal;
        LoanPrinciple: Decimal;
        LoanBalance: Decimal;
        ScheduleBalance1: Decimal;
        ExpectedAmount: Decimal;
        MonthsINArrears: Decimal;
        Minimumstatutoryratio: Decimal;
        Minimumstatutoryratio2: Decimal;
        Minimumstatutoryratio3: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516155_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
