#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport50029_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50029 "Daily Cashier Report."
{
    RDLCLayout = './Layouts/DailyCashierReport..rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
        {
            DataItemTableView = where("Bank Account No." = filter('BANK013' | 'BANK014'), Reversed = filter(false));
            RequestFilterFields = "Posting Date";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Company_Address; Company.Address)
            {
            }
            column(Company_Address2; Company."Address 2")
            {
            }
            column(Company_Phone_No; Company."Phone No.")
            {
            }
            column(ColumnCompany_Fax_No; Company."Fax No.")
            {
            }
            column(Company_Picture; Company.Picture)
            {
            }
            column(Company_Email; Company."E-Mail")
            {
            }
            column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
            {
            }
            column(DocumentNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Document No.")
            {
            }
            column(Description_BankAccountLedgerEntry; "Bank Account Ledger Entry".Description)
            {
            }
            column(UserID_BankAccountLedgerEntry; "Bank Account Ledger Entry"."User ID")
            {
            }
            column(Amount_BankAccountLedgerEntry; "Bank Account Ledger Entry".Amount)
            {
            }
            column(PostingDate_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Posting Date")
            {
            }
            column(Name; Name)
            {
            }
            column(BalAccountNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bal. Account No.")
            {
            }
            column(Narration; Narration)
            {
            }
            column(RunnBal; RunnBal)
            {
            }
            column(Debit; Debit)
            {
            }
            column(Credit; Credit)
            {
            }
            trigger OnAfterGetRecord();
            begin
                //RunnBal:=0;
                Debit := 0;
                Credit := 0;
                if "Bank Account Ledger Entry".Amount > 0 then
                    Debit := "Bank Account Ledger Entry".Amount;
                if "Bank Account Ledger Entry".Amount < 0 then
                    Credit := "Bank Account Ledger Entry".Amount;
                RunnBal += Debit + Credit;
                // IF BankRec."External Document No." ='' THEN begin
                if Vend.Get("Bal. Account No.") then begin
                    Name := Vend.Name;
                end else begin
                    BankRec.Reset;
                    BankRec.SetRange(BankRec."Document No.", "Bank Account Ledger Entry"."Document No.");
                    if BankRec.FindSet then begin
                        repeat
                            MemberLedger.Reset;
                            MemberLedger.SetRange(MemberLedger."Document No.", BankRec."Document No.");
                            if MemberLedger.FindFirst then begin
                                if Cust.Get(MemberLedger."Customer No.") then begin
                                    Name := Cust.Name;
                                end;
                            end;
                        until BankRec.Next = 0;
                    end
                end;
                BankRec.Reset;
                BankRec.SetRange(BankRec."Document No.", "Bank Account Ledger Entry"."Document No.");
                if BankRec.FindSet then begin
                    repeat
                        if (BankRec.Description = 'RETURN TO TREASURY') then
                            Name := 'RETURN TO TREASURY';
                        if (BankRec.Description = 'ISSUE TO TELLER') then
                            Name := 'ISSUE TO TELLER';
                    until BankRec.Next = 0;
                end;
                Paymenthd.Reset;
                Paymenthd.SetRange(Paymenthd."No.", "Bank Account Ledger Entry"."Document No.");
                if Paymenthd.FindSet then begin
                    repeat
                        if (BankRec.Description <> 'RETURN TO TREASURY') or (BankRec.Description <> 'ISSUE TO TELLER') then
                            Name := Paymenthd.Payee;
                    until Paymenthd.Next = 0;
                end;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                field("Mode of payment"; Modeofpayment)
                {
                    ApplicationArea = Basic;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                    trigger OnValidate()
                    begin
                        ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                        CurrReport.RequestOptionsPage.Close();
                    end;

                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        DateFilter := Format(StartDate) + '..' + Format(EndDate);
        Company.Get();
        Company.CalcFields(Picture);
        ;
        ReportsForNavPre;
    end;

    var
        Vend: Record Vendor;
        CreditAmt: Decimal;
        DebitAmt: Decimal;
        BankRec: Record "Bank Account Ledger Entry";
        DateFilter: Text;
        StartDate: Date;
        EndDate: Date;
        Name: Text;
        Company: Record "Company Information";
        Narration: Text;
        RunnBal: Decimal;
        Debit: Decimal;
        Credit: Decimal;
        MemberLedger: Record "Cust. Ledger Entry";
        Cust: Record Customer;
        Paymenthd: Record "Payment Header.";
        Modeofpayment: Option Cash;
        Modeofpayment1: Code[20];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50029_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
