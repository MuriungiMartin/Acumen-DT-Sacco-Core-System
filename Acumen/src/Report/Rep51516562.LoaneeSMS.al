#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516562_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516562 "Loanee SMS.."
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/LoaneeSMS...rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Loans Register"; "Loans Register")
        {
            DataItemTableView = where(Posted = filter(true), "Outstanding Balance" = filter(> 1), "Loan Product Type" = filter(<> 'E-LOAN'));
            RequestFilterFields = "Loan  No.", "Client Code", "Issued Date";
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(LoanNo_LoansRegister; "Loans Register"."Loan  No.")
            {
            }
            column(MonthLyRepy; MonthLyRepy)
            {
            }
            column(loanNo; loanNo)
            {
            }
            trigger OnPreDataItem();
            begin
                AmountDue := 0;
                PrincipleP := 0;
                Duedate := CalcDate('3D', Today);
                // Format(Duedate,0,'<Day,2>/<Month,2>/<Year4>');;
                // PaymentShecdule.RESET;
                // PaymentShecdule.SETRANGE(PaymentShecdule."Repayment Date",Duedate);
                // IF PaymentShecdule.FIND('-') THEN BEGIN
                //
                // END;
            end;

            trigger OnAfterGetRecord();
            begin
                ///**************************************************************************************************
                //*********************************************************************************************************
                //Loans with last payment date
                //{PrincipleP:="Loans Register"."Approved Amount"/"Loans Register".Installments;
                //"Loans Register".CALCFIELDS("Loans Register"."Last Pay Date","Loans Register"."Oustanding Interest","Loans Register"."Outstanding Balance");
                //IF "Loans Register"."Last Pay Date"<>0D THEN
                //  BEGIN
                //	//NextRepayment:=CALCDATE('+1M',"Loans Register"."Last Pay Date");
                //	IF  "Loans Register"."Last Pay Date" < CALCDATE('-1M>', TODAY) THEN BEGIN	//TODAY = CALCDATE('-1D',NextRepayment) THEN BEGIN
                //IF "Oustanding Interest"> 0 THEN
                //AmountDue:="Oustanding Interest"+PrincipleP
                //ELSE
                //AmountDue:=PrincipleP;}
                ////New code
                //PrincipleP:="Loans Register"."Approved Amount"/"Loans Register".Installments;
                //IF "Loans Register"."Loan Disbursement Date"  <= CALCDATE('<-1M>',TODAY) THEN  BEGIN
                //"Loans Register".CALCFIELDS("Loans Register"."Last Pay Date","Loans Register"."Oustanding Interest","Loans Register"."Outstanding Balance");
                //IF  "Loans Register"."Last Pay Date" < CALCDATE('<-1M>', TODAY) THEN
                ////Dday:=DATE2DMY("Loans Register"."Loan Disbursement Date",1);
                ////Dmonth:=DATE2DMY("Loans Register"."Loan Disbursement Date",2);
                ////Dyear:=DATE2DMY("Loans Register"."Loan Disbursement Date",3);
                //Pday:=DATE2DMY(TODAY,1);
                //Pmonth:=DATE2DMY(TODAY,2);
                //Pyear:=DATE2DMY(TODAY,3);
                //IF (Dday=Pday) AND (Dmonth<>Pmonth) THEN
                //IF ObjMemb.GET("Loans Register"."Client Code") THEN
                MonthLyRepy := 0;
                loanNo := Format(0);
                PaymentShecdule.Reset;
                PaymentShecdule.SetRange(PaymentShecdule."Loan No.", "Loans Register"."Loan  No.");
                PaymentShecdule.SetRange(PaymentShecdule."Member No.", "Client Code");
                ///PaymentShecdule.SETFILTER(PaymentShecdule."Outstanding Balance",'>%1',0);
                PaymentShecdule.SetRange(PaymentShecdule."Repayment Date", Duedate);
                if PaymentShecdule.FindSet then begin
                    if PaymentShecdule."Repayment Date" <> 0D then
                        if PaymentShecdule."Repayment Date" <> Duedate then
                            CurrReport.Skip
                        else
                            MonthLyRepy := ROUND(PaymentShecdule."Monthly Repayment", 0.01, '=');
                    //IF MonthLyRepy = 0 THEN CurrReport.SKIP;
                    Duedate1 := Format(Duedate, 0, '<Day,2>/<Month,2>/<Year4>');
                    //MESSAGE('%1',Duedate1);2
                    ObjMemb.Reset;
                    ObjMemb.SetRange(ObjMemb."No.", PaymentShecdule."Member No.");
                    if ObjMemb.Find('-') then begin
                        SMSMessage.Reset;
                        if SMSMessage.Find('+') then begin
                            iEntryNo := SMSMessage."Entry No";
                            iEntryNo := iEntryNo + 1;
                        end
                        else begin
                            iEntryNo := 1;
                        end;
                        if "Oustanding Interest" > 0 then
                            AmountDue := "Oustanding Interest" + PrincipleP
                        else
                            AmountDue := ROUND(PrincipleP, 0.01, '=');
                        AmountDue := ROUND(AmountDue, 0.01, '=');
                        SMSMessage.Init;
                        SMSMessage."Entry No" := iEntryNo;
                        SMSMessage."Batch No" := "Loans Register"."Loan  No.";
                        SMSMessage."Document No" := '';
                        SMSMessage."Account No" := "Client Code";
                        SMSMessage."Date Entered" := Today;
                        SMSMessage."Time Entered" := Time;
                        SMSMessage.Source := 'REMINDER';//FORMAT(ROUND(ABS(MonthLyRepy)),5)
                        SMSMessage."SMS Message" := 'Dear' + ' ' + Format("Loans Register"."Client Name") + ' ' + ', your loan repayment installment of Ksh' + ' ' + Format(ROUND(Abs(MonthLyRepy))) + ' ' + 'and Monthly saving of ksh ' + Format("Loans Register"."Monthly Contribution") + '' +
                        ' is due for repayment on ' + '' + Format(Duedate1) + '.' + 'For clarification Call 0713805770. Please ignore if already paid';
                        SMSMessage."Entered By" := UserId;
                        SMSMessage."Sent To Server" := SMSMessage."sent to server"::No;
                        SMSMessage."Telephone No" := ObjMemb."Phone No.";
                        if ObjMemb."Phone No." <> '' then
                            SMSMessage.Insert;
                    end;
                end;
                //END;
                //END;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        saving6: Decimal;
        saving5: Decimal;
        saving4: Decimal;
        Saving3: Decimal;
        saving2: Decimal;
        Saving1: Decimal;
        Monthlysavingsetup: Record "Monthly  saving setup";
        IssueDay: Integer;
        IssueMonth: Integer;
        SMSMessage: Record "SMS Messages";
        SMSSendDate: Date;
        currYear: Integer;
        CurrMonth: Integer;
        ObjGenSetUp: Record "Sacco General Set-Up";
        ObjCompInfo: Record "Company Information";
        ReminderMessage: Text;
        Installment: Decimal;
        DateToSend: Date;
        NextRepayment: Date;
        iEntryNo: Integer;
        ObjMemb: Record Customer;
        AmountDue: Decimal;
        PrincipleP: Decimal;
        Dday: Integer;
        Dmonth: Integer;
        Dyear: Integer;
        Pday: Integer;
        Pmonth: Integer;
        Pyear: Integer;
        PaymentShecdule: Record "Loan Repayment Schedule";
        Duedate: Date;
        MonthLyRepy: Decimal;
        loanNo: Code[20];
        Duedate1: Text;
        LoanRec: Record "Loans Register";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516562_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
