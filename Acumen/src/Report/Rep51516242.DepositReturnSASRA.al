#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516242_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516242 "Deposit Return SASRA.."
{
	RDLCLayout = './Layouts/DepositReturnSASRA...rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Members;"Member Register")
		{
			CalcFields = "Current Shares";
			DataItemTableView = sorting("No.");
			RequestFilterFields = "Date Filter","No.";
			column(ReportForNavId_1102755000; 1102755000) {} // Autogenerated by ForNav - Do not delete
			column(CompanyName; Company.Name)
			{
			}
			column(Company_Address; Company.Address)
			{
			}
			column(Company_Picture; Company.Picture)
			{
			}
			column(Company_City; Company.City)
			{
			}
			column(Count1; COUNT1)
			{
			}
			column(Count2; COUNT2)
			{
			}
			column(Count3; COUNT3)
			{
			}
			column(Count4; COUNT4)
			{
			}
			column(Count5; COUNT5)
			{
			}
			column(Account1; ACOUNT1)
			{
			}
			column(Account2; ACOUNT2)
			{
			}
			column(Account3; ACOUNT3)
			{
			}
			column(Account4; ACOUNT4)
			{
			}
			column(Account5; ACOUNT5)
			{
			}
			column(Faccount1; FACOUNT1)
			{
			}
			column(Faccount2; FACOUNT2)
			{
			}
			column(Faccount3; FACOUNT3)
			{
			}
			column(Faccount4; FACOUNT4)
			{
			}
			column(Faccount5; FACOUNT5)
			{
			}
			column(Bal1; BAL1)
			{
			}
			column(Bal2; BAL2)
			{
			}
			column(Bal3; BAL3)
			{
			}
			column(Bal4; BAL4)
			{
			}
			column(Bal5; BAL5)
			{
			}
			column(Abal1; ABAL1)
			{
			}
			column(Abal2; ABAL2)
			{
			}
			column(Abal3; ABAL3)
			{
			}
			column(Abal4; ABAL4)
			{
			}
			column(Abal5; ABAL5)
			{
			}
			column(Fbal1; FABAL1)
			{
			}
			column(Fbal2; FABAL2)
			{
			}
			column(Fbal3; FABAL3)
			{
			}
			column(Fbal4; FABAL4)
			{
			}
			column(Fbal5; FABAL5)
			{
			}
			column(GrandCount; GRANDCOUNT)
			{
			}
			column(GrandTotal; GrandTotal)
			{
			}
			column(Sbal1; SBAL1)
			{
			}
			column(Sbal2; SBAL2)
			{
			}
			column(Sbal3; SBAL3)
			{
			}
			column(Sbal4; SBAL4)
			{
			}
			column(Sbal5; SBAL5)
			{
			}
			column(Sccount1; SACOUNT1)
			{
			}
			column(Sacount2; SACOUNT2)
			{
			}
			column(Sacount3; SACOUNT3)
			{
			}
			column(Sacount4; SACOUNT4)
			{
			}
			column(Sacount5; SACOUNT5)
			{
			}
			column(No; LineNo)
			{
			}
			column(mBAL1; MBAL1)
			{
			}
			column(mBAL2; MBAL2)
			{
			}
			column(mBAL3; MBAL3)
			{
			}
			column(mBAL4; MBAL4)
			{
			}
			column(mBAL5; MBAL5)
			{
			}
			column(AABAL1; AABAL1)
			{
			}
			column(AABAL2; AABAL2)
			{
			}
			column(AABAL3; AABAL3)
			{
			}
			column(AABAL4; AABAL4)
			{
			}
			column(AABAL5; AABAL5)
			{
			}
			column(MACOUNT1; MACOUNT1)
			{
			}
			column(MACOUNT2; MACOUNT2)
			{
			}
			column(MACOUNT3; MACOUNT3)
			{
			}
			column(MACOUNT4; MACOUNT4)
			{
			}
			column(MACOUNT5; MACOUNT5)
			{
			}
			column(AACOUNT1; AACOUNT1)
			{
			}
			column(AACOUNT2; AACOUNT2)
			{
			}
			column(AACOUNT3; AACOUNT3)
			{
			}
			column(AACOUNT4; AACOUNT4)
			{
			}
			column(AACOUNT5; AACOUNT5)
			{
			}
			trigger OnPreDataItem();
			begin
				LineNo:=0;
				Company.Get;
				Company.CalcFields(Picture);
				DFilter:=GetFilter(Members."Date Filter");//'01/01/01..'+FORMAT(ASAT);
				Account.Reset;
				Account.SetRange(Account."Creditor Type",Account."Creditor Type");
				//Account.SETRANGE(Account."BOSA Account No",cust."No.");
				Account.SetFilter(Account."Account Type",'<>FIXED');
				Account.SetFilter(Account."Net Change",'<>0');
				Account.SetFilter(Account."Date Filter",DFilter);
				if Account.Find('-') then begin
				  repeat
					//Account.CALCFIELDS(Account."Net Change");
					Account.CalcFields (Account.Balance);
				   // Balance:=Account."Net Change";
					Balance:=Account.Balance;
					cnt+=1;  //MESSAGE(FORMAT(Balance));
					if Balance<=50000 then begin
					ABAL1:=ABAL1+ Balance;
					ACOUNT1:=ACOUNT1+1;
					end else if (Balance>50000.01) and (Balance<=100000) then begin
					ABAL2:=ABAL2+ Balance;	  FosaCount+=1;
					ACOUNT2:=ACOUNT2+1;
					end else if (Balance>100000.01) and (Balance<=300000) then begin
					ABAL3:=ABAL3+ Balance;
					ACOUNT3:=ACOUNT3+1;
					end else if (Balance>300000.01) and (Balance<=1000000) then begin
					ABAL4:=ABAL4+ Balance;
					ACOUNT4:=ACOUNT4+1;
					end else if Balance>1000000 then begin
					ABAL5:=ABAL5+ Balance;
					ACOUNT5:=ACOUNT5+1;
					end;
					GrandTotal+=ABAL1+ABAL2+ABAL3+ABAL4+ABAL5;
					GRANDCOUNT+=ACOUNT1+ACOUNT2+ACOUNT3+ACOUNT4+ACOUNT5;
				until Account.Next=0;
				end;
				Account.Reset;
				Account.SetFilter(Account."Account Type",'FIXED');
				//Account.SETRANGE(Account."BOSA Account No",cust."No.");
				Account.SetFilter(Account."Date Filter",DFilter);
				Account.SetFilter(Account."Net Change",'<>0');
				if Account.Find('-') then begin
				 repeat
					Account.CalcFields(Account."Net Change");
					Fbalance:=Account."Net Change";
					//IF  Fbalance>0 THEN BEGIN
					  if Fbalance<=50000 then begin
						  FABAL1:=FABAL1+ Fbalance;
						  FACOUNT1:=FACOUNT1+1;
						  end else if (Fbalance>50000.01) and (Fbalance<=100000) then begin
						  FABAL2:=FABAL2+ Fbalance;
						  FACOUNT2:=FACOUNT2+1;
						  end else if (Fbalance>100000.01) and (Fbalance<=300000) then begin
						  FABAL3:=FABAL3+ Fbalance;
						  FACOUNT3:=FACOUNT3+1;
						  end else if (Fbalance>300000.01) and (Fbalance<=1000000) then begin
						  FABAL4:=FABAL4+ Fbalance;
						  FACOUNT4:=FACOUNT4+1;
						  end else if Fbalance>1000000 then begin
						  FABAL5:=FABAL5+ Fbalance;
						  FACOUNT5:=FACOUNT5+1;
					  //END;
					end;
					GrandTotal+=FABAL1+FABAL2+FABAL3+FABAL4+FABAL5;
					GRANDCOUNT+=FACOUNT1+FACOUNT2+FACOUNT3+FACOUNT4+FACOUNT5;
				until Account.Next=0;
				end;
				GrandTotal:=BAL1+BAL2+BAL3+BAL4+BAL5+ABAL1+ABAL2+ABAL3+ABAL4+ABAL5+FABAL1+FABAL2+FABAL3+FABAL4+FABAL5;
				GRANDCOUNT:=ACOUNT1+ACOUNT2+ACOUNT3+ACOUNT4+ACOUNT5+FACOUNT1+FACOUNT2+FACOUNT3+FACOUNT4+FACOUNT5;
			end;
			
			trigger OnAfterGetRecord();
			begin
				LineNo:=LineNo+1;
				SHARES:=0;
				Savings:=0;
				Balance:=0;
				Fbalance:=0;
				GrandTotal:=0;
				Asset:=0;
				Jaza:=0;
				SchoolFees:=0;
				//SAYE:=0;
				//SCH:=0;
				//IDD:=0;
				//XMAS:=0;
				//SETFILTER("Date Filter",DFilter);
				CalcFields("Current Shares");
				//CALCFIELDS("MDF Contribution");
				CalcFields("FOSA Shares");
				//CALCFIELDS("Investment B/F");
				//SchoolFees:="MDF Contribution";
				SHARES:="Current Shares";
				Savings:="FOSA Shares";
				//Asset:="Investment B/F";
				//Non Withdrawable
				if (SHARES<>0) and(SHARES<=50000) then begin
				BAL1:=BAL1+SHARES;
				COUNT1:=COUNT1+1;
				end else if (SHARES>50000.01) and (SHARES<=100000) then begin
				BAL2:=BAL2+ SHARES;
				COUNT2:=COUNT2+1;
				end else if (SHARES>100000.01) and (SHARES<=300000) then begin
				BAL3:=BAL3+ SHARES;
				COUNT3:=COUNT3+1;
				end else if (SHARES>300000.01) and (SHARES<=1000000) then begin
				BAL4:=BAL4+ SHARES;
				COUNT4:=COUNT4+1;
				end else if SHARES>1000000 then begin
				BAL5:=BAL5+ SHARES;
				COUNT5:=COUNT5+1;
				end;
					 //*****************
				//Treated as MDF
				if (SchoolFees<>0) and(SchoolFees<=50000) then begin
				MBAL1:=MBAL1+SchoolFees;
				MACOUNT1:=MACOUNT1+1;
				end else if (SchoolFees>50000.01) and (SchoolFees<=100000) then begin
				MBAL2:=MBAL2+ SchoolFees;
				MACOUNT2:=MACOUNT2+1;
				end else if (SchoolFees>100000.01) and (SchoolFees<=300000) then begin
				MBAL3:=MBAL3+ SchoolFees;
				MACOUNT3:=MACOUNT3+1;
				end else if (SchoolFees>300000.01) and (SchoolFees<=1000000) then begin
				MBAL4:=MBAL4+ SchoolFees;
				MACOUNT4:=MACOUNT4+1;
				end else if SchoolFees>1000000 then begin
				MBAL5:=MBAL5+ SchoolFees;
				MACOUNT5:=MACOUNT5+1;
				end;
					//*****************
				//*****************
				//Treated as Mjengo deposits
				if (Savings<>0) and(Savings<=50000) then begin
				SBAL1:=SBAL1+Savings;
				SACOUNT1:=SACOUNT1+1;
				end else if (Savings>50000.01) and (Savings<=100000) then begin
				SBAL2:=SBAL2+ Savings;
				SACOUNT2:=SACOUNT2+1;
				end else if (Savings>100000.01) and (Savings<=300000) then begin
				SBAL3:=SBAL3+ Savings;
				SACOUNT3:=SACOUNT3+1;
				end else if (Savings>300000.01) and (Savings<=1000000) then begin
				SBAL4:=SBAL4+ Savings;
				SACOUNT4:=SACOUNT4+1;
				end else if Savings>1000000 then begin
				SBAL5:=SBAL5+ Savings;
				SACOUNT5:=SACOUNT5+1;
				end;
					 //*****************
				//Treated as Assets shares
				if (Asset<>0) and(Asset<=50000) then begin
				AABAL1:=AABAL1+Asset;
				AACOUNT1:=AACOUNT1+1;
				end else if (Asset>50000.01) and (Asset<=100000) then begin
				AABAL2:=AABAL2+ Asset;
				AACOUNT2:=AACOUNT2+1;
				end else if (Asset>100000.01) and (Asset<=300000) then begin
				AABAL3:=AABAL3+ Asset;
				AACOUNT3:=AACOUNT3+1;
				end else if (Asset>300000.01) and (Asset<=1000000) then begin
				AABAL4:=AABAL4+ Asset;
				AACOUNT4:=AACOUNT4+1;
				end else if Asset>1000000 then begin
				AABAL5:=AABAL5+ Asset;
				AACOUNT5:=AACOUNT5+1;
				end;
				//*************************end
				GrandTotal:=BAL1+BAL2+BAL3+BAL4+BAL5+ABAL1+ABAL2+ABAL3+ABAL4+ABAL5+FABAL1+FABAL2+FABAL3+FABAL4+FABAL5+MBAL1+MBAL2+MBAL3+MBAL4+MBAL5+SBAL1+SBAL2+SBAL3+SBAL4+SBAL5+AABAL1+AABAL2+AABAL3+AABAL4+AABAL5;
				GRANDCOUNT:=COUNT1+COUNT2+COUNT3+COUNT4+COUNT5+AACOUNT1+AACOUNT2+AACOUNT3+AACOUNT4+AACOUNT5+MACOUNT1+MACOUNT2+MACOUNT3+MACOUNT4+MACOUNT5+SACOUNT1+SACOUNT2+SACOUNT3+SACOUNT4+SACOUNT5+ACOUNT1+ACOUNT2+ACOUNT3+
				ACOUNT4+ACOUNT5+FACOUNT1+FACOUNT2+FACOUNT3+FACOUNT4+FACOUNT5;
				//new code
			end;
			
			trigger OnPostDataItem();
			begin
						 //   MESSAGE('Fosa : %1\Saye : %1\Xmas : %1\Sch : %1\Idd : %1\',FosaCount,SayeCount,XmasCount,SchCount,IddCount);
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(ASAT;ASAT)
				{
					ApplicationArea = Basic;
					Caption = 'As At..............';
					Visible = false;
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Less50000: Decimal;
		"50000 to 10000": Decimal;
		"10000 t0 300000": Decimal;
		"300000 to 100000": Decimal;
		"over 1000000": Decimal;
		Account: Record Vendor;
		"Less50000-a/c": Decimal;
		"50000 to 10000-a/c": Decimal;
		"10000 t0 300000-a/c": Decimal;
		"300000 to 100000-a/c": Decimal;
		"over 1000000-a/c": Decimal;
		cust: Record "Member Register";
		SHARES: Decimal;
		BAL1: Decimal;
		BAL2: Decimal;
		BAL3: Decimal;
		BAL4: Decimal;
		BAL5: Decimal;
		COUNT1: Integer;
		COUNT2: Integer;
		COUNT3: Integer;
		COUNT4: Integer;
		COUNT5: Integer;
		ABAL1: Decimal;
		ABAL2: Decimal;
		ABAL3: Decimal;
		ABAL4: Decimal;
		ABAL5: Decimal;
		ACOUNT1: Integer;
		ACOUNT2: Integer;
		ACOUNT3: Integer;
		ACOUNT4: Integer;
		ACOUNT5: Integer;
		Balance: Decimal;
		FABAL1: Decimal;
		FABAL2: Decimal;
		FABAL3: Decimal;
		FABAL4: Decimal;
		FABAL5: Decimal;
		FACOUNT1: Integer;
		FACOUNT2: Integer;
		FACOUNT3: Integer;
		FACOUNT4: Integer;
		FACOUNT5: Integer;
		Fbalance: Decimal;
		GrandTotal: Decimal;
		GRANDCOUNT: Integer;
		DFilter: Text[50];
		ASAT: Date;
		Company: Record "Company Information";
		vend: Record Vendor;
		Jaza: Decimal;
		SAYE: Decimal;
		SCH: Decimal;
		IDD: Decimal;
		XMAS: Decimal;
		Savings: Decimal;
		cnt: Decimal;
		SayeCount: Decimal;
		XmasCount: Decimal;
		IddCount: Decimal;
		DepositCount: Decimal;
		FosaCount: Decimal;
		SchCount: Decimal;
		SchoolFees: Decimal;
		SBAL1: Decimal;
		SBAL2: Decimal;
		SBAL3: Decimal;
		SBAL4: Decimal;
		SBAL5: Decimal;
		SACOUNT1: Integer;
		SACOUNT2: Integer;
		SACOUNT3: Integer;
		SACOUNT4: Integer;
		SACOUNT5: Integer;
		LineNo: Integer;
		Asset: Decimal;
		AACOUNT1: Integer;
		AACOUNT2: Integer;
		AACOUNT3: Integer;
		AACOUNT4: Integer;
		AACOUNT5: Integer;
		AABAL1: Decimal;
		AABAL2: Decimal;
		AABAL3: Decimal;
		AABAL4: Decimal;
		AABAL5: Decimal;
		MACOUNT1: Integer;
		MACOUNT2: Integer;
		MACOUNT3: Integer;
		MACOUNT4: Integer;
		MACOUNT5: Integer;
		MBAL1: Decimal;
		MBAL2: Decimal;
		MBAL3: Decimal;
		MBAL4: Decimal;
		MBAL5: Decimal;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516242_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
