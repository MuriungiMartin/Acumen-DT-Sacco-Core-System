#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516507_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516507 "Treasury Transfer."
{
	UsageCategory = ReportsAndAnalysis;
	RDLCLayout = './Layouts/TreasuryTransfer..rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Treasury Transactions";"Treasury Transactions")
		{
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(No_TreasuryTransactions; "Treasury Transactions".No)
			{
			}
			column(TransactionDate_TreasuryTransactions; "Treasury Transactions"."Transaction Date")
			{
			}
			column(TransactionType_TreasuryTransactions; "Treasury Transactions"."Transaction Type")
			{
			}
			column(FromAccount_TreasuryTransactions; "Treasury Transactions"."From Account")
			{
			}
			column(ToAccount_TreasuryTransactions; "Treasury Transactions"."To Account")
			{
			}
			column(Description_TreasuryTransactions; "Treasury Transactions".Description)
			{
			}
			column(Amount_TreasuryTransactions; "Treasury Transactions".Amount)
			{
			}
			column(Posted_TreasuryTransactions; "Treasury Transactions".Posted)
			{
			}
			column(DatePosted_TreasuryTransactions; "Treasury Transactions"."Date Posted")
			{
			}
			column(TimePosted_TreasuryTransactions; "Treasury Transactions"."Time Posted")
			{
			}
			column(PostedBy_TreasuryTransactions; "Treasury Transactions"."Posted By")
			{
			}
			column(NoSeries_TreasuryTransactions; "Treasury Transactions"."No. Series")
			{
			}
			column(TransactionTime_TreasuryTransactions; "Treasury Transactions"."Transaction Time")
			{
			}
			column(CoinageAmount_TreasuryTransactions; "Treasury Transactions"."Coinage Amount")
			{
			}
			column(CurrencyCode_TreasuryTransactions; "Treasury Transactions"."Currency Code")
			{
			}
			column(Issued_TreasuryTransactions; "Treasury Transactions".Issued)
			{
			}
			column(DateIssued_TreasuryTransactions; "Treasury Transactions"."Date Issued")
			{
			}
			column(CompName; CompInf.Name)
			{
			}
			column(CompAddress; CompInf.Address)
			{
			}
			column(CompCity; CompInf.City)
			{
			}
			column(Comp_Picture; CompInf.Picture)
			{
			}
			column(Comp_Email; CompInf."E-Mail")
			{
			}
			column(ToName; ToName)
			{
			}
			column(FromName; FromName)
			{
			}
			trigger OnAfterGetRecord();
			begin
				Banks.Reset;
				Banks.SetRange(Banks."No.","Treasury Transactions"."To Account");
				if Banks.FindFirst then begin
				Users.Reset;
				Users.SetRange(Users."User Name",Banks.CashierID);
				if Users.FindFirst then
				ToName:=Users."Full Name";
				end;
				Banks.Reset;
				Banks.SetRange(Banks."No.","Treasury Transactions"."From Account");
				if Banks.FindFirst then begin
				FromName:=Banks.Name;
				end;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		CompInf.Get();
		CompInf.CalcFields(CompInf.Picture);
		;ReportsForNavPre;
	end;
	var
		CompInf: Record "Company Information";
		Banks: Record "Bank Account";
		ToName: Text[40];
		FromName: Text[40];
		Users: Record User;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516507_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
