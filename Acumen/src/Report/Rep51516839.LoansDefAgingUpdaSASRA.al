#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516839_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516839 "Loans Def Aging Upda - SASRA"
{
	RDLCLayout = './Layouts/LoansDefAgingUpda-SASRA.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Loans Register";"Loans Register")
		{
			DataItemTableView = sorting("Loan  No.") where(Posted=const(true),"Outstanding Balance"=filter(>0));
			RequestFilterFields = "Loan  No.","Loan Product Type","Outstanding Balance","Date filter";
			column(ReportForNavId_4645; 4645) {} // Autogenerated by ForNav - Do not delete
			column(FORMAT_TODAY_0_4_; Format(Today,0,4))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
			{
			}
			column(UserId; UserId)
			{
			}
			column(Loans__Loan__No__; "Loans Register"."Loan  No.")
			{
			}
			column(Loans__Loan_Product_Type_; "Loans Register"."Loan Product Type")
			{
			}
			column(Loans_Loans__Staff_No_; "Loans Register"."Staff No")
			{
			}
			column(Loans__Client_Name_; "Loans Register"."Client Name")
			{
			}
			column(Loans_Loans__Outstanding_Balance_; "Loans Register"."Outstanding Balance")
			{
			}
			column(V2Month_; "2Month")
			{
			}
			column(V3Month_; "3Month")
			{
			}
			column(Over3Month; Over3Month)
			{
			}
			column(V1Month_; "1Month")
			{
			}
			column(V0Month_; "0Month")
			{
			}
			column(Loans_Loans__Outstanding_Balance__Control1000000016; "Loans Register"."Outstanding Balance")
			{
			}
			column(Loans__Approved_Amount_; "Loans Register"."Approved Amount")
			{
			}
			column(Loans_Loans__Interest_Due_; "Loans Register"."Interest Due")
			{
			}
			column(V1MonthC_; "1MonthC")
			{
			}
			column(V2MonthC_; "2MonthC")
			{
			}
			column(V3MonthC_; "3MonthC")
			{
			}
			column(Over3MonthC; Over3MonthC)
			{
			}
			column(NoLoans; NoLoans)
			{
			}
			column(GrandTotal; GrandTotal)
			{
			}
			column(V0Month__Control1102760031; "0Month")
			{
			}
			column(V1Month__Control1102760032; "1Month")
			{
			}
			column(V2Month__Control1102760033; "2Month")
			{
			}
			column(V3Month__Control1102760034; "3Month")
			{
			}
			column(Over3Month_Control1102760035; Over3Month)
			{
			}
			column(V0MonthC_; "0MonthC")
			{
			}
			column(Loans_Aging_Analysis__SASRA_Caption; Loans_Aging_Analysis__SASRA_CaptionLbl)
			{
			}
			column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
			{
			}
			column(Loans__Loan__No__Caption; FieldCaption("Loan  No."))
			{
			}
			column(Loan_TypeCaption; Loan_TypeCaptionLbl)
			{
			}
			column(Staff_No_Caption; Staff_No_CaptionLbl)
			{
			}
			column(Loans__Client_Name_Caption; FieldCaption("Client Name"))
			{
			}
			column(Oustanding_BalanceCaption; Oustanding_BalanceCaptionLbl)
			{
			}
			column(PerformingCaption; PerformingCaptionLbl)
			{
			}
			column(V1___30_Days_Caption; V1___30_Days_CaptionLbl)
			{
			}
			column(V0_Days_Caption; V0_Days_CaptionLbl)
			{
			}
			column(WatchCaption; WatchCaptionLbl)
			{
			}
			column(V31___180_Days_Caption; V31___180_Days_CaptionLbl)
			{
			}
			column(SubstandardCaption; SubstandardCaptionLbl)
			{
			}
			column(V181___360_Days_Caption; V181___360_Days_CaptionLbl)
			{
			}
			column(DoubtfulCaption; DoubtfulCaptionLbl)
			{
			}
			column(Over_360_DaysCaption; Over_360_DaysCaptionLbl)
			{
			}
			column(LossCaption; LossCaptionLbl)
			{
			}
			column(TotalsCaption; TotalsCaptionLbl)
			{
			}
			column(CountCaption; CountCaptionLbl)
			{
			}
			column(Grand_TotalCaption; Grand_TotalCaptionLbl)
			{
			}
			column(No; LineNo)
			{
			}
			trigger OnPreDataItem();
			begin
			
				GrandTotal:=0;
				LineNo:=0;
				if AsAt = 0D then
				DFilter:='..'+Format(AsAt) ;
				"Loans Register".SetFilter( "Loans Register"."Date filter",DFilter);
				 "Loans Register".SetFilter("Loans Register"."Issued Date",'<=%1',AsAt);
				//"Loans Register".SETFILTER("Loans Register"."Last Pay Date",'<=%1',AsAt);
			end;
			
			trigger OnAfterGetRecord();
			begin
				LineNo:=LineNo+1;
				ExpectedBal := 0;
				ExpectedRepayment := 0;
				//MESSAGE('As At %1',AsAt);
				Evaluate(DFormula,'1Q');
				Cust.Reset;
				if "Loans Register".Source = "Loans Register".Source::FOSA then
				Cust.SetRange(Cust."No.","Loans Register"."BOSA No")
				//Cust.SETRANGE(Cust."No.","Loans Register"."Client Code")
				else
				Cust.SetRange(Cust."No.","Loans Register"."Client Code");
				if Cust.Find('-') then begin
				Cust.CalcFields(Cust."Current Shares");
				PhoneNo := Cust."Phone No.";
				//"StaffNo." := Cust."Personal No";
				Deposits := Cust."Current Shares";
				end;
				"0Month":=0;
				"1Month":=0;
				"2Month":=0;
				"3Month":=0;
				Over3Month:=0;
				"Loans Register"."Last Pay Date":=DateFilter;
				DateFilter:="Loans Register"."Last Pay Date";
				"Loans Register".CalcFields("Loans Register"."Last Pay Date","Loans Register"."Outstanding Balance");
				Message('here %1',LoansApp."Outstanding Balance");
				//"Loans Register".SETFILTER("Loans Register"."Last Pay Date", '<%1', 0D) ;
				Message('HERE %1',"Loans Register"."Last Pay Date");
					RESCBAL := LoansApp."Outstanding Balance";
					Message('HERE %1', RESCBAL);
					ExpectedRepayment := ExpectedRepayment + RSchedule."Principal Repayment";
				   Message('HERE %1',ExpectedRepayment);
				Arrears := ExpectedRepayment - RepaidAmount;
				   Message('HERE %1',Arrears);
				if "Loans Register"."Last Pay Date">0D then begin
				 if ( "Loans Register"."Last Pay Date" > 0D)  and ( "Loans Register"."Expected Date of Completion" > 0D ) then  begin
				if "Loans Register"."Instalment Period" = DFormula then
				LastDueDate:=CalcDate('1Q',"Loans Register"."Last Pay Date")
				else
				LastDueDate:="Loans Register"."Last Pay Date";
				if LastDueDate = 0D then begin
				if "Loans Register"."Issued Date" <> 0D then begin
				if LoanProduct.Get("Loans Register"."Loan Product Type") then begin
				if LoanProduct."Check Off Recovery" = false then begin
				FirstMonthDate:=Dmy2date(1,Date2dmy("Loans Register"."Issued Date",2),Date2dmy("Loans Register"."Issued Date",3));
				EndMonthDate:=CalcDate('-1D',CalcDate('1M',FirstMonthDate));
				//*
				//LastDueDate:=CALCDATE('-2D',FirstMonthDate);//Loans."Issued Date"
				if Date2dmy("Loans Register"."Issued Date",1) < 20 then
				LastDueDate:=CalcDate('-2D',FirstMonthDate)
				else
				LastDueDate:=EndMonthDate;
				end else begin
				FirstMonthDate:=Dmy2date(1,Date2dmy("Loans Register"."Issued Date",2),Date2dmy("Loans Register"."Issued Date",3));
				EndMonthDate:=CalcDate('-1D',CalcDate('1M',FirstMonthDate));
				LastDueDate:=EndMonthDate;//Loans."Issued Date";//CALCDATE('1M',Loans."Issued Date");
				end;
				end;
				end;
				end;
				if DFilter = '' then
				  begin
					DateFilter := CalcDate('-CM-1D',AsAt);
					//  DateFilter :="Loans Register"."Last Pay Date" ;
					DFilter:='..'+Format(AsAt);
				if RSchedule.Find('-') then
					RSchedule.Reset;
					RSchedule.SetRange(RSchedule."Loan No.","Loans Register"."Loan  No.");
					//RSchedule.SETRANGE(RSchedule."Closed Schedule",FALSE);
					RSchedule.SetFilter(RSchedule."Repayment Date",'..%1',DateFilter);
					if RSchedule.Find('-') then
					  begin
						repeat
						  ExpectedRepayment := ExpectedRepayment + RSchedule."Principal Repayment";
						 Message('Expected Payment %1 and Date %2',ExpectedRepayment,RSchedule."Repayment Date");
						until RSchedule.Next = 0;
					  end;
				  end else
				  begin
				  if RSchedule.Find('-') then
					RSchedule.Reset;
					RSchedule.SetRange(RSchedule."Loan No.","Loans Register"."Loan  No.");
				   // RSchedule.SETRANGE(RSchedule."Closed Schedule",FALSE);
					RSchedule.SetFilter(RSchedule."Repayment Date",DFilter);
					if RSchedule.Find('-') then
					  begin
						repeat
						  ExpectedRepayment := ExpectedRepayment + RSchedule."Principal Repayment";
						// MESSAGE('For filter Expected Payment %1',ExpectedRepayment);
					 //   MESSAGE(FORMAT( ExpectedRepayment));
						until RSchedule.Next = 0;
					  end;
				  end;
				RESCBAL:=0;
				if "Loans Register".Rescheduled=false then begin
				LoansApp.Reset;
				LoansApp.SetRange(LoansApp."Loan  No.","Loans Register"."Loan  No.");
				LoansApp.SetFilter(LoansApp."Date filter",'%1',"Loans Register"."Date filter");
				if LoansApp.Find('-') then
				  begin
					//LoansApp.CALCFIELDS(LoansApp."Outstanding Balance");
					"Loans Register".CalcFields("Loans Register"."Last Pay Date","Loans Register"."Outstanding Balance");
					RepaidAmount := "Loans Register"."Approved Amount" -  "Loans Register"."Outstanding Balance";
				  end;
				end else begin
				LoansApp.Reset;
				LoansApp.SetRange(LoansApp."Loan  No.","Loans Register"."Loan  No.");
				LoansApp.SetFilter(LoansApp."Date filter",'..%1',"Loans Register"."Loan Rescheduled Date");
				if LoansApp.Find('-') then
				  begin
					LoansApp.CalcFields(LoansApp."Outstanding Balance");
								   Message('here %1',LoansApp."Outstanding Balance");
					RESCBAL := LoansApp."Outstanding Balance";
				  end;
					RepaidAmount := RESCBAL -  "Loans Register"."Outstanding Balance";
					   Message('here %1',RepaidAmount);
				end;
				Arrears := ExpectedRepayment - RepaidAmount;
						 Message('here %1',ExpectedRepayment);
					   Message('here %1',Arrears);
				///IF Arrears  > 0 THEN
				//BEGIN
				 //  Arrears:=0;
				  "Amount in Arrears" := Arrears;
				   "Loans Register".Modify;
				ReschBal:=0;
				if "Loans Register".Rescheduled=false then begin
				if ("Loans Register"."Approved Amount">0) and( "Loans Register".Installments>0) then
				MonthlyRepayment := ROUND(("Loans Register"."Approved Amount"/"Loans Register".Installments),0.01,'=');
				NoofMonths :=ROUND((Arrears/MonthlyRepayment),1,'=');
				end else begin
				LoansApp.Reset;
				LoansApp.SetRange(LoansApp."Loan  No.","Loans Register"."Loan  No.");
				//LoansApp.SETFILTER( LoansApp."Last Pay Date", '%>1', 0D) ;
				///LoansApp.SETFILTER(LoansApp."Date filter",'..%1',"Loans Register"."Loan Rescheduled Date");
				  LoansApp.SetFilter(LoansApp."Date filter",'..%1',"Loans Register"."Last Pay Date");
				/// MESSAGE('here %1',"Loans Register"."Last Pay Date");
				//LoansApp.SETFILTER(LoansApp."Date filter",'..%1',DateFilter);
				if LoansApp.Find('-') then begin
				if LoansApp."Last Pay Date" > 0D   then
				LoansApp.CalcFields(LoansApp."Outstanding Balance");
				  ReschBal:=LoansApp."Outstanding Balance";
				end;
				if ReschBal>0 then
				//MonthlyRepayment := ROUND((ReschBal/"Loans Register"."Loan Reschedule Installments"),0.01,'=');
				 Message('here %1',MonthlyRepayment);
				NoofMonths :=ROUND((Arrears/MonthlyRepayment),1,'=');
				///MESSAGE('here %1',NoofMonths);
				end;
				  /// MESSAGE('As at %2 Expected Repayment = %1, Amount Paid %5 and Arrears = %3 AND No of months %4',ExpectedRepayment,DateFilter,Arrears,NoofMonths,RepaidAmount);
				 if NoofMonths <=0  then begin	   //FirstMonthDate > CALCDATE('-1M',AsAt)
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Perfoming;
							"Loans Register".Modify;
				end else if (NoofMonths > 0) and (NoofMonths <= 2) then begin	// FirstMonthDate > CALCDATE('-2M',AsAt)
				"1Month":="Loans Register"."Outstanding Balance";
				"1MonthC":="1MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Watch;
						   "Loans Register".Modify;
				end else if (NoofMonths > 2) and (NoofMonths <= 6) then begin	 //FirstMonthDate > CALCDATE('-7M',AsAt)
				"2Month":="Loans Register"."Outstanding Balance";
				"2MonthC":="2MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Substandard;
						   "Loans Register".Modify;
				end else if (NoofMonths > 6) and (NoofMonths <= 12) then begin	//FirstMonthDate > CALCDATE('-13M',AsAt)
				"3Month":="Loans Register"."Outstanding Balance";
				"3MonthC":="3MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Doubtful;
				end else if (NoofMonths > 6) and (NoofMonths > 12) then begin	//FirstMonthDate > CALCDATE('-13M',AsAt)
				"3Month":="Loans Register"."Outstanding Balance";
				"3MonthC":="3MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Loss;
					 "Loans Register".Modify;
				end else  begin
				Over3Month:="Loans Register"."Outstanding Balance";
				Over3MonthC:=Over3MonthC+1;
				"Loans Category-SASRA":="loans category-sasra"::Loss;
				"Loans Register".Modify;
				  end;
				  end;
				  if LoansApp."Expected Date of Completion"<=Today then
				 "Loans Category-SASRA":="loans category-sasra"::Loss;
				"Loans Register".Modify;
				//LoansApp.RESET;
				//LoansApp.SETRANGE(LoansApp."Loan  No.","Loans Register"."Loan  No.");
				 // "Loans Register".SETFILTER(LoansApp."Date filter",'..%1',"Loans Register"."Last Pay Date");
					   "Loans Register".CalcFields( "Loans Register"."Last Pay Date","Loans Register"."Outstanding Balance");
					  // MESSAGE('here %1',LoansApp."Last Pay Date");
				 if "Loans Register"."Last Pay Date" = 0D   then begin
				  if "Loans Register"."Expected Date of Completion" < Today then  begin
				 // repeat
				Over3Month:="Loans Register"."Outstanding Balance";
				Over3MonthC:=Over3MonthC+1;
				"Loans Category-SASRA":="loans category-sasra"::Loss;
				 "Amount in Arrears" := "Loans Register"."Outstanding Balance";
				"Loans Register".Modify;
				end else
				if  "Loans Register"."Expected Date of Completion">=Today then begin
				   Nomonths:=0;
				 // Nomonths:=CALCDATE(TODAY)-CALCDATE("Loans Register"."Issued Date");
				  Nomonths:=ROUND((Today-"Loans Register"."Issued Date")/30,1,'<');
				 // MESSAGE(FORMAT(Nomonths));
				// END;
				 if Nomonths <=0  then begin	   //FirstMonthDate > CALCDATE('-1M',AsAt)
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Perfoming;
				 "Amount in Arrears" := "Loans Register"."Outstanding Balance";
							"Loans Register".Modify;
				end else if ( Nomonths > 0) and (Nomonths <= 1) then begin	// FirstMonthDate > CALCDATE('-2M',AsAt)
				"1Month":="Loans Register"."Outstanding Balance";
				"1MonthC":="1MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Watch;
				 "Amount in Arrears" := "Loans Register"."Outstanding Balance";
						   "Loans Register".Modify;
				end else if ( Nomonths > 1) and ( Nomonths <= 6) then begin	 //FirstMonthDate > CALCDATE('-7M',AsAt)
				"2Month":="Loans Register"."Outstanding Balance";
				"2MonthC":="2MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Substandard;
				 "Amount in Arrears" := "Loans Register"."Outstanding Balance";
						   "Loans Register".Modify;
				end else if ( Nomonths > 6) and ( Nomonths <= 12) then begin	//FirstMonthDate > CALCDATE('-13M',AsAt)
				"3Month":="Loans Register"."Outstanding Balance";
				"3MonthC":="3MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Doubtful;
				 "Amount in Arrears" := "Loans Register"."Outstanding Balance";
					 "Loans Register".Modify;
				 end;
				end;
				end;
					   "Loans Register".CalcFields( "Loans Register"."Last Pay Date","Loans Register"."Outstanding Balance");
					  // MESSAGE('here %1',LoansApp."Last Pay Date");
				 if ( "Loans Register"."Last Pay Date" > 0D)  and ( "Loans Register"."Expected Date of Completion" =0D ) then  begin
				   Nomonths:=0;
				 // Nomonths:=CALCDATE(TODAY)-CALCDATE("Loans Register"."Issued Date");
				  Nomonths:=ROUND((Today-"Loans Register"."Last Pay Date")/30,1,'<');
				 /// MESSAGE(FORMAT(Nomonths));
				// END;
				 if Nomonths <=0  then begin	   //FirstMonthDate > CALCDATE('-1M',AsAt)
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Perfoming;
							"Loans Register".Modify;
				end else if ( Nomonths > 0) and (Nomonths <= 1) then begin	// FirstMonthDate > CALCDATE('-2M',AsAt)
				"1Month":="Loans Register"."Outstanding Balance";
				"1MonthC":="1MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Watch;
						   "Loans Register".Modify;
				end else if ( Nomonths > 1) and ( Nomonths <= 6) then begin	 //FirstMonthDate > CALCDATE('-7M',AsAt)
				"2Month":="Loans Register"."Outstanding Balance";
				"2MonthC":="2MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Substandard;
						   "Loans Register".Modify;
				end else if ( Nomonths > 6) and ( Nomonths <= 12) then begin	//FirstMonthDate > CALCDATE('-13M',AsAt)
				"3Month":="Loans Register"."Outstanding Balance";
				"3MonthC":="3MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Doubtful;
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				////END ELSE IF
				//Over3Month:="Loans Register"."Outstanding Balance";
				//Over3MonthC:=Over3MonthC+1;
				//"Loans Category-SASRA":="Loans Category-SASRA"::Loss;
				//"Loans Register".MODIFY;
				//"Loans Category-SASRA":="Loans Category-SASRA"::Perfoming;
				// "Loans Register".MODIFY;
					 "Loans Register".Modify;
				end else  begin
				Over3Month:="Loans Register"."Outstanding Balance";
				Over3MonthC:=Over3MonthC+1;
				"Loans Category-SASRA":="loans category-sasra"::Loss;
				"Loans Register".Modify;
				 end;
				end;
				 "Loans Register".Modify;
				GrandTotal:=GrandTotal+"Loans Register"."Outstanding Balance";
				if ("1Month"+"2Month"+"3Month"+Over3Month) > 0 then begin
				NoLoans:=NoLoans+1;
				end else
				begin
				"0Month":="Loans Register"."Outstanding Balance";
				"0MonthC":="0MonthC"+1;
				"Loans Category-SASRA":="loans category-sasra"::Loss;
				 "Loans Register".Modify;
				end;
				//IF ("0Month" = 0) AND ("1Month" = 0) AND ("2Month" = 0) AND ("3Month" = 0) AND (Over3Month = 0) THEN
				//CurrReport.SKIP;
					/*
				/////////NDUVASON
				DFilter:='..'+FORMAT(ASAT);
				//MESSAGE(FORMAT(AsAt));
				IF "Loans Register"."Repayment Frequency"="Loans Register"."Repayment Frequency"::Monthly THEN BEGIN
				 IF RepaymentPeriod=CALCDATE('CM',ASAT) THEN BEGIN
						LastMonth:=RepaymentPeriod;
					  END ELSE BEGIN
						//LastMonth:=CALCDATE('-1M',RepaymentPeriod);
					  END;
					LastMonth:=CALCDATE('CM',LastMonth);
				 END;
				  DFilter:='..'+FORMAT(AsAt);
				  Loans.RESET;
				  Loans.SETRANGE(Loans."Loan  No.","Loans Register"."Loan  No.");
				  Loans.SETFILTER(Loans."Date filter",DFilter);
				  IF Loans.FIND('-') THEN BEGIN
					Loans.CALCFIELDS(Loans."Outstanding Balance",Loans."Loan Principle Repayment",Loans."Total schedule Repayment",Loans."Schedule Repayment");
					LBal:=Loans."Outstanding Balance";
					//MESSAGE('##Loan Balance %1',FORMAT(LBal));
					ScheduledLoanBal:=Loans."Total schedule Repayment";
					//ScheduledLoanBal:=Loans."Schedule Repayments";
					//MESSAGE(FORMAT(ScheduledLoanBal));
					ExpectedBalance:=ROUND(Loans."Approved Amount"-ScheduledLoanBal,1,'>');
					//MESSAGE('##Expected Balance %1',FORMAT(ExpectedBalance));
					Arrears:=LBal-ExpectedBalance;
					//MESSAGE(FORMAT(Arrears));
				  END;
				  //MESSAGE('Principal=%1 Balance=%2 ExepectedBal=%3 Arrear=%4,ScheduledLoanBal=%5',"Loans Register"."Approved Amount",LBal,ExpectedBalance,Arrears,ScheduledLoanBal);
				 // MESSAGE('%1',Loans."Scheduled Principal to Date");
				  IF ((Arrears<0) OR (Arrears=0)) THEN BEGIN
				  Arrears:=0
				  END ELSE
				  Arrears:=Arrears;
				  "Amount in Arrears":= Arrears;
				  MODIFY;
				 // IF Arrears<> 0 THEN BEGIN
				  IF Loans."Loan Principle Repayment" >0 THEN
				  "No.ofMonthsinArrears":=ROUND((Arrears/Loans."Loan Principle Repayment")*30,1,'>');
				  //MESSAGE('%1',"No.ofMonthsinArrears");
				  IF Loans."Loan Product Type"='FIXED ADV' THEN
					"No.ofMonthsinArrears":=0;
				  IF Loans."Loan Product Type"='MSADV' THEN BEGIN
				   Numberofdays:=AsAt-"Loans Register"."Loan Disbursement Date";
				   IF Numberofdays<=60 THEN
					 "No.ofMonthsinArrears":=0;
					   Arrears:=0;
					   "Amount in Arrears":= Arrears;
				  MODIFY;
				  END;
				  //END;
				  //"No.ofMonthsinArrears"*30;
				 // MESSAGE('%1 %2 %3',"No.ofMonthsinArrears",Arrears,Loans.Repayment);
				  IF ("No.ofMonthsinArrears"=0)  THEN BEGIN
					"Loans Register"."Loans Category":="Loans Register"."Loans Category"::Perfoming
				  END ELSE
				  IF (("No.ofMonthsinArrears">0) AND ("No.ofMonthsinArrears"<=30))THEN BEGIN
					"Loans Register"."Loans Category":="Loans Register"."Loans Category"::Watch
				  END ELSE
				  IF ("No.ofMonthsinArrears">30) AND ("No.ofMonthsinArrears"<=180)THEN BEGIN
					"Loans Register"."Loans Category":="Loans Register"."Loans Category"::Substandard
				  END ELSE
				  IF ("No.ofMonthsinArrears">180) AND ("No.ofMonthsinArrears"<=360)THEN BEGIN
					"Loans Register"."Loans Category":="Loans Register"."Loans Category"::Doubtful
				  END ELSE
				  IF ("No.ofMonthsinArrears">360) THEN BEGIN
					"Loans Register"."Loans Category":="Loans Register"."Loans Category"::Loss
				  END;
				//  IF Loans."No of Months in Arrears":="No.ofMonthsinArrears";
				 // "Loans Register"."Loan Insurance Paid":="No.ofMonthsinArrears";
				  "Loans Register".MODIFY;
					IF "Loans Register"."Loans Category"="Loans Register"."Loans Category"::Perfoming THEN
					 "0Month":="Loans Register"."Outstanding Balance"
					ELSE
					IF "Loans Register"."Loans Category"="Loans Register"."Loans Category"::Watch THEN
					 "1Month":="Loans Register"."Outstanding Balance"
					ELSE
					IF "Loans Register"."Loans Category"="Loans Register"."Loans Category"::Substandard THEN
					 "2Month":="Loans Register"."Outstanding Balance"
					ELSE
					IF "Loans Register"."Loans Category"="Loans Register"."Loans Category"::Doubtful THEN
					 "3Month":="Loans Register"."Outstanding Balance"
					ELSE
					IF "Loans Register"."Loans Category"="Loans Register"."Loans Category"::Loss THEN
					 Over3Month:="Loans Register"."Outstanding Balance";
						*/
					GrandTotal:=GrandTotal+"Loans Register"."Outstanding Balance";
					if ("1Month"+"2Month"+"3Month"+Over3Month) > 0 then
					NoLoans:=NoLoans+1;
					end;
			
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field("Date Filter";AsAt)
				{
					ApplicationArea = Basic;
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
			 //REPORT.RUN(REPORT::"Calculate Amount in Arrears");
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		"1Month": Decimal;
		"2Month": Decimal;
		"3Month": Decimal;
		Over3Month: Decimal;
		ShowLoan: Boolean;
		AsAt: Date;
		LBal: Decimal;
		Numberofdays: Integer;
		RESCBAL: Decimal;
		"No.ofMonthsinArrears": Integer;
		ExpectedBalance: Decimal;
		Loans: Record "Loans Register";
		LastMonth: Date;
		ScheduledLoanBal: Decimal;
		LastDueDate: Date;
		ReschBal: Decimal;
		DFormula: DateFormula;
		"0MonthC": Integer;
		"1MonthC": Integer;
		"2MonthC": Integer;
		"3MonthC": Integer;
		Over3MonthC: Integer;
		NoLoans: Integer;
		PhoneNo: Text[30];
		Cust: Record "Member Register";
		"StaffNo.": Text[30];
		Deposits: Decimal;
		GrandTotal: Decimal;
		"0Month": Decimal;
		LoanProduct: Record "Loan Products Setup";
		FirstMonthDate: Date;
		EndMonthDate: Date;
		Loans_Aging_Analysis__SASRA_CaptionLbl: label 'Loans Aging Analysis (SASRA)';
		CurrReport_PAGENOCaptionLbl: label 'Page';
		Loan_TypeCaptionLbl: label 'Loan Type';
		Staff_No_CaptionLbl: label 'Staff No.';
		Oustanding_BalanceCaptionLbl: label 'Oustanding Balance';
		PerformingCaptionLbl: label 'Performing';
		V1___30_Days_CaptionLbl: label '(1 - 30 Days)';
		V0_Days_CaptionLbl: label '(0 Days)';
		WatchCaptionLbl: label 'Watch';
		V31___180_Days_CaptionLbl: label '(31 - 180 Days)';
		SubstandardCaptionLbl: label 'Substandard';
		V181___360_Days_CaptionLbl: label '(181 - 360 Days)';
		DoubtfulCaptionLbl: label 'Doubtful';
		Over_360_DaysCaptionLbl: label 'Over 360 Days';
		LossCaptionLbl: label 'Loss';
		TotalsCaptionLbl: label 'Totals';
		CountCaptionLbl: label 'Count';
		Grand_TotalCaptionLbl: label 'Grand Total';
		LineNo: Integer;
		RSchedule: Record "Loan Repayment Schedule";
		ExpectedBal: Decimal;
		DateFilter: Date;
		ExpectedRepayment: Decimal;
		RepaidAmount: Decimal;
		Arrears: Decimal;
		NoofMonths: Integer;
		MonthlyRepayment: Decimal;
		LoansApp: Record "Loans Register";
		DFilter: Text[50];
		Nomonths: Integer;
		RepaymentPeriod: Date;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516839_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
