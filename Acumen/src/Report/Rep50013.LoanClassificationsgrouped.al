#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport50013_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50013 "Loan Classifications grouped"
{
	RDLCLayout = './Layouts/LoanClassificationsgrouped.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(LSetup;"Loan Products Setup")
		{
			column(ReportForNavId_1000000009; 1000000009) {} // Autogenerated by ForNav - Do not delete
			column(Code_LSetup; LSetup.Code)
			{
			}
			column(ProductDescription_LSetup; LSetup."Product Description")
			{
			}
			dataitem(LClassifications;"FORM 4 - Risk Classifications")
			{
				CalcFields = "Num Account";
				DataItemLink = "Loan Product"=field(Code);
				column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
				column(SasraCategory_LClassifications; LClassifications."Sasra Category")
				{
				}
				column(NumAccount_LClassifications; LClassifications."Num Account")
				{
				}
				column(LoanProduct_LClassifications; LClassifications."Loan Product")
				{
				}
				column(TotalClassified; TotalClassified)
				{
				}
				column(TotalClassified_per; TotalClassified_per)
				{
				}
				column(Rate; Rate)
				{
				}
				column(ProvisionRiskAmount; ProvisionRiskAmount)
				{
				}
				column(UserId; UserId)
				{
				}
				column(COMPANYNAME; COMPANYNAME)
				{
				}
				column(CompanyPic; Company.Picture)
				{
				}
				trigger OnPreDataItem();
				begin
					Company.Get();
					Company.CalcFields(Company.Picture);
				end;
				
				trigger OnAfterGetRecord();
				begin
					TotalClassified:=FnTotalLoans(LClassifications);
					if TotalLoanAmount>0 then
					TotalClassified_per:=(TotalClassified/TotalLoanAmount)*100;
					case LClassifications."Sasra Category" of
					  LClassifications."sasra category"::Perfoming:Rate:=1;
					  LClassifications."sasra category"::Watch:Rate:=5;
					  LClassifications."sasra category"::Substandard:Rate:=25;
					  LClassifications."sasra category"::Doubtful:Rate:=50;
					  LClassifications."sasra category"::Loss:Rate:=100;
					end;
					ProvisionRiskAmount:=TotalClassified*Rate/100;
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				TotalLoanAmount:=0;
				TotalLoanAmount:=FnTotalLoanAmount(LSetup.Code);
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		TotalClassified: Decimal;
		TotalLoanAmount: Decimal;
		TotalClassified_per: Decimal;
		Rate: Integer;
		ProvisionRiskAmount: Decimal;
		Company: Record "Company Information";

	local procedure FnTotalLoans(ObjRecords: Record "FORM 4 - Risk Classifications"): Decimal
	var
		ObjLoans: Record "Loans Register";
		TotalLoans: Decimal;
	begin
		TotalLoans:=0;
		ObjLoans.Reset;
		ObjLoans.SetRange("Loan Product Type",ObjRecords."Loan Product");
		ObjLoans.SetRange("Loans Category",ObjRecords."Sasra Category");
		if ObjLoans.Find('-') then
		  begin
			repeat
			  ObjLoans.CalcFields("Outstanding Balance");
			  if ObjLoans."Outstanding Balance" >0 then
			  TotalLoans:=TotalLoans+ObjLoans."Outstanding Balance";
			until ObjLoans.Next=0;
		  end;
		exit(TotalLoans);
	end;

	local procedure FnTotalLoanAmount(ProductCode: Code[100]): Decimal
	var
		ObjLoans: Record "Loans Register";
		TotalLoans: Decimal;
	begin
		ObjLoans.Reset;
		ObjLoans.SetRange("Loan Product Type",ProductCode);
		ObjLoans.SetFilter("Loans Category",'%1|%2|%3|%4|%5',ObjLoans."loans category"::Watch,ObjLoans."loans category"::Substandard,ObjLoans."loans category"::Doubtful
		,ObjLoans."loans category"::Loss,ObjLoans."loans category"::Perfoming);
		if ObjLoans.Find('-') then
		  begin
			repeat
			  ObjLoans.CalcFields("Outstanding Balance");
			  if ObjLoans."Outstanding Balance" >0 then
			  TotalLoans:=TotalLoans+ObjLoans."Outstanding Balance";
			until ObjLoans.Next=0;
		  end;
		exit(TotalLoans);
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50013_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
