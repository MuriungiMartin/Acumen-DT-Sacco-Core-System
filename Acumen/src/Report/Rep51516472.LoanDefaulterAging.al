#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516472_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516472 "Loan Defaulter Aging"
{
	RDLCLayout = './Layouts/LoanDefaulterAging.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Loans Register";"Loans Register")
		{
			DataItemTableView = sorting("Loan  No.") where("Outstanding Balance"=filter(>0));
			RequestFilterFields = "Loan Product Type","Outstanding Balance";
			column(ReportForNavId_4645; 4645) {} // Autogenerated by ForNav - Do not delete
			column(FORMAT_TODAY_0_4_; Format(Today,0,4))
			{
			}
			column(COMPANYNAME; COMPANYNAME)
			{
			}
			column(Company_Address; Company.Address)
			{
			}
			column(Company_Address2; Company."Address 2")
			{
			}
			column(Company_PhoneNo; Company."Phone No.")
			{
			}
			column(Company_Email; Company."E-Mail")
			{
			}
			column(Company_Picture; Company.Picture)
			{
			}
			column(CurrReport_PAGENO; Format(ReportForNav.PageNo))
			{
			}
			column(UserId; UserId)
			{
			}
			column(Loan_No; "Loans Register"."Loan  No.")
			{
			}
			column(Loan_Type; "Loans Register"."Loan Product Type")
			{
			}
			column(Client_Code; "Loans Register"."Client Code")
			{
			}
			column(Client_Name; Loans."Client Name")
			{
			}
			column(Interest_Due; Loans."Interest Due")
			{
			}
			column(Approved_Amount; Loans."Approved Amount")
			{
			}
			column(OneMonth; "1Month")
			{
			}
			column(TwoMonths; "2Month")
			{
			}
			column(ThreeMonths; "3Month")
			{
			}
			column(Over3Month; Over3Month)
			{
			}
			column(Outstanding_Balance; Loans."Outstanding Balance")
			{
			}
			column(No; SN)
			{
			}
			trigger OnPreDataItem();
			begin
			
				GrandTotal:=0;
			end;
			
			trigger OnAfterGetRecord();
			begin
				if AsAt = 0D then
				AsAt:=Today;
				Evaluate(DFormula,'1Q');
				"1Month":=0;
				"2Month":=0;
				"3Month":=0;
				Over3Month:=0;
				Loans.CalcFields(Loans."Last Pay Date",Loans."Outstanding Balance");
				if Loans."Instalment Period" = DFormula then
				LastDueDate:=CalcDate('1Q',Loans."Last Pay Date")
				else
				LastDueDate:=Loans."Last Pay Date";
				if LastDueDate = 0D then begin
				LastDueDate:=CalcDate('1M',Loans."Issued Date");
				end;
				if LastDueDate > CalcDate('-1M',AsAt)  then
				"1Month":=Loans."Outstanding Balance"
				else if LastDueDate > CalcDate('-2M',AsAt) then
				"2Month":=Loans."Outstanding Balance"
				else if LastDueDate > CalcDate('-3M',AsAt) then
				"3Month":=Loans."Loan Balance at Rescheduling"
				else if LastDueDate > CalcDate('-4M',AsAt) then
				Over3Month:=Loans."Outstanding Balance"
				else
				Over3Month:=Loans."Outstanding Balance";
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(AsAt;AsAt)
				{
					ApplicationArea = Basic;
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
				Company.Get();
				Company.CalcFields(Company.Picture);
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		SN: Integer;
		Company: Record "Company Information";
		"1Month": Decimal;
		"2Month": Decimal;
		"3Month": Decimal;
		Over3Month: Decimal;
		ShowLoan: Boolean;
		AsAt: Date;
		LastDueDate: Date;
		DFormula: DateFormula;
		Loans: Record "Loans Register";
		"0Month": Decimal;
		GrandTotal: Decimal;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516472_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
