#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516141_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516141 "Loans Exception Report"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/LoansExceptionReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Customer-Pledge"; Customer)
        {
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(No; "Customer-Pledge"."No.")
            {
            }
            column(Name; "Customer-Pledge".Name)
            {
            }
            column(LoanBalance; LoanBalance)
            {
            }
            column(GLBalance; GLBalance)
            {
            }
            column(Variance; Variance)
            {
            }
            column(UserId; UserId)
            {
            }
            column(date; Format(Today, 0, 4))
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("No.");
                LoanBalance := 0;

            end;

            trigger OnAfterGetRecord();
            begin
                LoanBalance := 0;
                GLBalance := 0;
                Loans.Reset;
                Loans.SetRange(Loans."Client Code", "Customer-Pledge"."No.");
                Loans.SetRange(Loans."Loan Product Type", LoanType);
                if Loans.Find('-') then begin
                    repeat
                        Loans.CalcFields(Loans."Outstanding Balance");
                        LoanBalance := LoanBalance + Loans."Outstanding Balance";
                    until Loans.Next = 0;
                end;
                if LoanTypes.Get(LoanType) then begin
                    GlEntry.Reset;
                    GlEntry.SetRange(GlEntry."G/L Account No.", LoanTypes."Loan Account");
                    GlEntry.SetRange(GlEntry."Source No.", "Customer-Pledge"."No.");
                    if GlEntry.Find('-') then begin
                        repeat
                            GLBalance := GLBalance + GlEntry.Amount;
                        until GlEntry.Next = 0;
                    end;
                end;
                Variance := LoanBalance - GLBalance;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        LoanTypes: Record "Loan Products Setup";
        Loans: Record "Loans Register";
        LoanBalance: Decimal;
        GlEntry: Record "G/L Entry";
        GLBalance: Decimal;
        Variance: Decimal;
        LoanType: Code[20];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516141_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
