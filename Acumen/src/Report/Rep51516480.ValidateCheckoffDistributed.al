#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516480_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516480 "Validate Checkoff-Distributed"
{
	RDLCLayout = './Layouts/ValidateCheckoff-Distributed.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Checkoff Lines-Distributed";"Checkoff Lines-Distributed")
		{
			column(ReportForNavId_1000000000; 1000000000) {} // Autogenerated by ForNav - Do not delete
			trigger OnAfterGetRecord();
			begin
				   //MESSAGE('loantype is %1');
				   Cust.Reset;
					Cust.SetRange(Cust."Personal No","Staff/Payroll No");
					if Cust.Find('-') then begin
					 repeat
					  Cust.CalcFields(Cust."Current Shares");
					  "Member No.":=Cust."No.";
					  Name:=Cust.Name;
					  "Expected Amount":=Cust."Monthly Contribution";
					  Variance:=Amount-"Expected Amount";
					  "FOSA Account":=Cust."FOSA Account No.";
					  Modify;
					 until Cust.Next=0;
					end;
					LoanType.Reset;
					LoanType.SetRange(LoanType."Special Code Principle","Checkoff Lines-Distributed"."Special Code");
					  if LoanType.Find('-') then begin
						"Loan Type":=LoanType.Code;
						 Modify;
				// IF LoanType."Product Description"<>'SALARY ADVANCE' THEN BEGIN
					Loans.Reset;
				   Loans.SetRange(Loans."Staff No","Checkoff Lines-Distributed"."Staff/Payroll No");
				   ///Loans.SETRANGE(Loans."Client Code","Checkoff Lines-Distributed"."Member No." );
					Loans.SetRange(Loans."Loan Product Type","Loan Type");
					  if Loans.Find('-') then begin
					  repeat
						Loans.CalcFields(Loans."Outstanding Balance");
						if Loans."Outstanding Balance">0 then begin
						"Loan No.":=Loans."Loan  No.";
						"Checkoff Lines-Distributed"."Expected Amount":=Loans."Loan Principle Repayment";
						"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Loan Repayment";
						"Checkoff Lines-Distributed"."Trans Type":='REPAYMENT';
						"Checkoff Lines-Distributed".Source:=Loans.Source;
						 Modify;
						end;
					  until Loans.Next=0;
					  end;
					  end;
					LoanType.Reset;
					LoanType.SetRange(LoanType."Special Code Interest","Checkoff Lines-Distributed"."Special Code");
					  if LoanType.Find('-') then begin
						"Loan Type":=LoanType.Code;
						 Modify;
					   // MESSAGE('loantype is %1',"Loan Type");
					Loans.Reset;
					Loans.SetRange(Loans."Staff No","Checkoff Lines-Distributed"."Staff/Payroll No");
				   // Loans.SETRANGE(Loans."Client Code","Checkoff Lines-Distributed"."Member No.");
					Loans.SetRange(Loans."Loan Product Type","Loan Type");
					  if Loans.Find('-') then begin
					  repeat
						Loans.CalcFields(Loans."Outstanding Balance");
						if Loans."Outstanding Balance">0 then begin
						"Loan No.":=Loans."Loan  No.";
						 // MESSAGE('loantype is %1',"Loan Type");
						"Checkoff Lines-Distributed"."Expected Amount":=Loans."Loan Interest Repayment";
						"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Interest Paid";
						"Checkoff Lines-Distributed"."Trans Type":='INTEREST';
						"Checkoff Lines-Distributed".Source:=Loans.Source;
						 Modify;
						end;
					  until Loans.Next=0;
					  end;
					  end;
					LoanType.Reset;
					LoanType.SetRange(LoanType."Special Code Principle","Checkoff Lines-Distributed"."Special Code");
					  if LoanType.Find('-') then begin
						"Loan Type":=LoanType.Code;
						 Modify;
					   end;
				Loans.Reset;
				Loans.SetRange(Loans."Staff No","Checkoff Lines-Distributed"."Staff/Payroll No");
				//Loans.SETRANGE(Loans."Client Code","Checkoff Lines-Distributed"."Member No.");
				Loans.SetRange(Loans."Loan Product Type","Loan Type");
				// Loans.SETFILTER(Loans."Outstanding Balance",'>%1',0);
				if Loans.FindLast then begin
				repeat
				Loans.CalcFields(Loans."Outstanding Balance");
				if Loans."Outstanding Balance"<=0 then begin
				"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Unallocated Funds";
				"Checkoff Lines-Distributed"."Trans Type":='UNALLOCATED';
				"Checkoff Lines-Distributed".Modify;
				end;
				until Loans.Next =0;
				end;
				// END;
				LoanType.Reset;
				LoanType.SetRange(LoanType."Special Code Interest","Checkoff Lines-Distributed"."Special Code");
				  if LoanType.Find('-') then begin
					"Loan Type":=LoanType.Code;
					  Modify;
					  end;
				Loans.Reset;
				Loans.SetRange(Loans."Staff No","Checkoff Lines-Distributed"."Staff/Payroll No");
				//Loans.SETRANGE(Loans."Client Code","Checkoff Lines-Distributed"."Member No.");
				Loans.SetRange(Loans."Loan Product Type","Loan Type");
				// Loans.SETFILTER(Loans."Outstanding Balance",'>%1',0);
				if Loans.FindLast then begin
				repeat
				Loans.CalcFields(Loans."Outstanding Balance");
				if Loans."Outstanding Balance"<=0 then begin
				"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Unallocated Funds";
				"Checkoff Lines-Distributed"."Trans Type":='UNALLOCATED';
				"Checkoff Lines-Distributed".Modify;
				end;
				until Loans.Next =0;
				end;
				// END;
				 if "Checkoff Lines-Distributed"."Loan No."='' then begin
					  "Checkoff Lines-Distributed"."Loans Not found":=true;
					  Modify;
				end;
				if "Checkoff Lines-Distributed"."Special Code"='00IKPS' then
				 "Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Deposit Contribution"
				else  if "Checkoff Lines-Distributed"."Special Code"='BEN' then
				 "Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Benevolent Fund"
				else if "Checkoff Lines-Distributed"."Special Code"='229' then
				"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Share Capital"
				else if "Checkoff Lines-Distributed"."Special Code"='337' then
				"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."transaction type"::"Capital Reserve";
				"Checkoff Lines-Distributed".Modify;
				if "Checkoff Lines-Distributed"."Special Code"='00IKPS' then
				 "Checkoff Lines-Distributed"."Trans Type":='DEPOSITS'
				else if "Checkoff Lines-Distributed"."Special Code"='BEN' then
				 "Checkoff Lines-Distributed"."Trans Type":='BENEVOLENT'
				else if "Checkoff Lines-Distributed"."Special Code"='229' then
				"Checkoff Lines-Distributed"."Trans Type":='SHARES'
				else if "Checkoff Lines-Distributed"."Special Code"='337' then
				"Checkoff Lines-Distributed"."Trans Type":='RESERVE'
				else if "Checkoff Lines-Distributed"."Special Code"='110' then
				"Checkoff Lines-Distributed"."Trans Type":='FOSA';
				"Checkoff Lines-Distributed".Modify;
				 if "Checkoff Lines-Distributed"."Trans Type"='' then
				 "Checkoff Lines-Distributed"."Trans Type":='UNALLOCATED'
				 else
				"Checkoff Lines-Distributed"."Transaction Type":="Checkoff Lines-Distributed"."Transaction Type";
				"Checkoff Lines-Distributed".Modify;
				//END;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(ASATDATE;ASATDATE)
				{
					ApplicationArea = Basic;
					Caption = 'As At';
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;
	var
		Rcpt: Record "Checkoff Lines-Distributed";
		PNo: Integer;
		Cust: Record "Member Register";
		Dept: Code[10];
		Loans: Record "Loans Register";
		LoanType: Record "Loan Products Setup";
		Pdate: Date;
		Variance: Decimal;
		ASATDATE: Date;
		BaldateTXT: Text[30];
		Baldate: Date;
		Employees: Record "Checkoff Lines-Distributed";
		RcptHeader: Record "Checkoff Header-Distributed";

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516480_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
