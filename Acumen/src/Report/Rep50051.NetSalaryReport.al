#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport50051_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 50051 "Net Salary Report"
{
    UsageCategory = Lists;
    RDLCLayout = './Layouts/NetSalaryReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Salary Processing Headerr"; "Salary Processing Headerr")
        {
            RequestFilterFields = No, "Document No", "Employer Code";
            column(ReportForNavId_1000000010; 1000000010) { } // Autogenerated by ForNav - Do not delete
            column(EmployerCode_SalaryProcessingHeaderr; "Salary Processing Headerr"."Employer Code")
            {
            }
            column(No_SalaryProcessingHeaderr; "Salary Processing Headerr".No)
            {
            }
            dataitem("Salary Processing Lines"; "Salary Processing Lines")
            {
                DataItemLink = "Salary Header No." = field(No);
                column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
                column(BOSANo_SalaryProcessingLines; "Salary Processing Lines"."BOSA No")
                {
                }
                column(No_SalaryProcessingLines; "Salary Processing Lines"."No.")
                {
                }
                column(AccountNo_SalaryProcessingLines; "Salary Processing Lines"."Account No.")
                {
                }
                column(StaffNo_SalaryProcessingLines; "Salary Processing Lines"."Staff No.")
                {
                }
                column(DocumentNo_SalaryProcessingLines; "Salary Processing Lines"."Document No.")
                {
                }
                column(AccountName_SalaryProcessingLines; "Salary Processing Lines"."Account Name")
                {
                }
                column(Name_SalaryProcessingLines; "Salary Processing Lines".Name)
                {
                }
                column(DocumentNo; DocumentNo)
                {
                }
                column(Amount_SalaryProcessingLines; "Salary Processing Lines".Amount)
                {
                }
                column(LoanRepayments; LoanRepayments)
                {
                }
                column(InterestPaid; InterestPaid)
                {
                }
                column(OtherDeductions; OtherDeductions)
                {
                }
                column(STORecovered; STORecovered)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    ObjSalaries.Reset;
                    ObjSalaries.SetRange(No, "Salary Processing Lines"."Salary Header No.");
                    if ObjSalaries.Find('-') then begin
                        DocumentNo := ObjSalaries."Document No";
                        LoanRepayments := FnGetLoanRepayments(ObjSalaries."Document No", "Salary Processing Lines"."BOSA No") + FnGetLoanRepayments(ObjSalaries."Document No", "Salary Processing Lines"."Account No.");
                        InterestPaid := FnGetLoanInterest(ObjSalaries."Document No", "Salary Processing Lines"."BOSA No") + FnGetLoanInterest(ObjSalaries."Document No", "Salary Processing Lines"."Account No.");
                        STORecovered := FnGetSalarySTO(ObjSalaries."Document No", "Salary Processing Lines"."Account No.") + FnGetSalarySTOBOSATransactions(ObjSalaries."Document No", "Salary Processing Lines"."BOSA No", "Salary Processing Lines"."Account No.");
                        OtherDeductions := 150 + 30 + 15;
                    end;
                end;

            }
        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        ObjSalaries: Record "Salary Processing Headerr";
        DocumentNo: Code[100];
        LoanRepayments: Decimal;
        InterestPaid: Decimal;
        OtherDeductions: Decimal;
        STORecovered: Decimal;

    local procedure FnGetLoanRepayments(DocumentNo: Code[100]; MemberNumber: Code[100]): Decimal
    var
        TotalRepayment: Decimal;
        ObjMemberLedgerEntry: Record "Cust. Ledger Entry";
    begin
        ObjMemberLedgerEntry.Reset;
        ObjMemberLedgerEntry.SetRange("Document No.", DocumentNo);
        ObjMemberLedgerEntry.SetRange("Customer No.", MemberNumber);
        ObjMemberLedgerEntry.SetRange("Transaction Type", ObjMemberLedgerEntry."transaction type"::"Loan Repayment");
        if ObjMemberLedgerEntry.Find('-') then begin
            repeat
                TotalRepayment := ObjMemberLedgerEntry.Amount + TotalRepayment;
            until ObjMemberLedgerEntry.Next = 0;
        end;
        exit(TotalRepayment);
    end;

    local procedure FnGetLoanInterest(DocumentNo: Code[100]; MemberNumber: Code[100]): Decimal
    var
        TotalRepayment: Decimal;
        ObjMemberLedgerEntry: Record "Cust. Ledger Entry";
    begin
        ObjMemberLedgerEntry.Reset;
        ObjMemberLedgerEntry.SetRange("Document No.", DocumentNo);
        ObjMemberLedgerEntry.SetRange("Customer No.", MemberNumber);
        ObjMemberLedgerEntry.SetRange("Transaction Type", ObjMemberLedgerEntry."transaction type"::"Interest Paid");
        if ObjMemberLedgerEntry.Find('-') then begin
            repeat
                TotalRepayment := ObjMemberLedgerEntry.Amount + TotalRepayment;
            until ObjMemberLedgerEntry.Next = 0;
        end;
        exit(TotalRepayment);
    end;

    local procedure FnGetSalarySTO(DocumentNo: Code[100]; MemberNumber: Code[100]): Decimal
    var
        TotalRepayment: Decimal;
        ObjVendorLedgerEntry: Record "Vendor Ledger Entry";
        ObjSTOs: Record "Standing Orders";
    begin
        ObjSTOs.Reset;
        ObjSTOs.SetRange("Source Account No.", MemberNumber);
        ObjSTOs.SetRange("Destination Account Type", ObjSTOs."destination account type"::Internal);
        if ObjSTOs.Find('-') then begin
            repeat
                ObjVendorLedgerEntry.Reset;
                ObjVendorLedgerEntry.SetRange("Document No.", DocumentNo);
                ObjVendorLedgerEntry.SetRange("Vendor No.", MemberNumber);
                ObjVendorLedgerEntry.SetRange("External Document No.", ObjSTOs."No.");
                if ObjVendorLedgerEntry.Find('-') then begin
                    ObjVendorLedgerEntry.CalcFields(Amount);
                    TotalRepayment := ObjVendorLedgerEntry.Amount + TotalRepayment;
                end;
            until ObjSTOs.Next = 0;
            exit(TotalRepayment);
        end;
    end;

    local procedure FnGetSalarySTOBOSATransactions(DocumentNo: Code[100]; MemberNumber: Code[100]; FosaAccountNo: Code[100]): Decimal
    var
        TotalRepayment: Decimal;
        ObjMemberLedgerEntry: Record "Cust. Ledger Entry";
        ObjSTOs: Record "Standing Orders";
    begin
        ObjSTOs.Reset;
        ObjSTOs.SetRange("Source Account No.", FosaAccountNo);
        ObjSTOs.SetRange("Destination Account Type", ObjSTOs."destination account type"::BOSA);
        if ObjSTOs.Find('-') then begin
            repeat
                ObjMemberLedgerEntry.Reset;
                ObjMemberLedgerEntry.SetRange("Document No.", DocumentNo);
                ObjMemberLedgerEntry.SetRange("Customer No.", MemberNumber);
                ObjMemberLedgerEntry.SetRange("External Document No.", ObjSTOs."No.");
                ObjMemberLedgerEntry.SetFilter("Transaction Type", '%1|%2|%3', ObjMemberLedgerEntry."transaction type"::"Deposit Contribution", ObjMemberLedgerEntry."transaction type"::"Benevolent Fund",
                ObjMemberLedgerEntry."transaction type"::"Insurance Contribution");
                if ObjMemberLedgerEntry.Find('-') then begin
                    //ObjMemberLedgerEntry.CALCFIELDS(Amount);
                    TotalRepayment := ObjMemberLedgerEntry.Amount + TotalRepayment;
                end;
            until ObjSTOs.Next = 0;
            exit(TotalRepayment);
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50051_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
