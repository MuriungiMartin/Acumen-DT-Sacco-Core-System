#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.6.3.0.2259")
	{
		type(ForNav.Report_6_3_0_2259; ForNavReport51516534_v6_3_0_2259){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516534 "Ollin Bank Schedule"
{
	RDLCLayout = './Layouts/OllinBankSchedule.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem("Payroll Employee.";"Payroll Employee.")
		{
			RequestFilterFields = "Bank Code","Branch Code";
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			column(PF_No; "Payroll Employee."."No.")
			{
			}
			column(Main_Bank; "Payroll Employee."."Bank Code")
			{
			}
			column(Branch_Bank; "Payroll Employee."."Branch Name")
			{
			}
			column(Bank_Code; "Payroll Employee."."Bank Name")
			{
			}
			column(Branch_Code; "Payroll Employee."."Branch Code")
			{
			}
			column(Acc_No; "Payroll Employee."."Bank Account No")
			{
			}
			column(CompName; CompName)
			{
			}
			column(pic; info.Picture)
			{
			}
			column(Addr1; Addr1)
			{
			}
			column(Addr2; Addr2)
			{
			}
			column(Email; Email)
			{
			}
			column(Net_Pay; NetPay)
			{
			}
			column(Name; StrName)
			{
			}
			column(ContractType; "Payroll Employee."."Period Filter")
			{
			}
			trigger OnPreDataItem();
			begin
				   info.Reset;
				   if info.Get then info.CalcFields(info.Picture);
				   //Pict:=info.Picture;
				   CompName:=info.Name;
				   Addr1:=info.Address;
				   Addr2:=info.City;
				   Email:=info."E-Mail";
			end;
			
			trigger OnAfterGetRecord();
			begin
				   StrName:="Payroll Employee.".Surname+' '+"Payroll Employee.".Firstname+' '+"Payroll Employee.".Lastname;
				   if "Payroll Employee.".Status="Payroll Employee.".Status::Active then begin
				   prPeriodTransactions.Reset;
				   prPeriodTransactions.SetRange(prPeriodTransactions."Payroll Period",periods);
				   prPeriodTransactions.SetRange(prPeriodTransactions."Employee Code","Payroll Employee."."No.");
				   prPeriodTransactions.SetRange(prPeriodTransactions."Transaction Code",'Net Pay');
				   if prPeriodTransactions.Find('-') then begin
				   NetPay:=prPeriodTransactions.Amount;
				   //NetPay:=ROUND(NetPay,1,'=');
				   end
				   end  else begin
				 CurrReport.Skip;
				 end;
			end;
			
		}
	}

	requestpage
	{

  
		SaveValues = false;	  layout
		{
			area(content)
			{
				field(Period;periods)
				{
					ApplicationArea = Basic;
					Caption = 'Period:';
					TableRelation = "Payroll Calender."."Date Opened";
				}
				field(ForNavOpenDesigner;ReportForNavOpenDesigner)
				{
					ApplicationArea = Basic;
					Caption = 'Design';
					Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;

				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		if UserSetup.Get(UserId) then
		begin
		if UserSetup."View Payroll"=false then Error ('You dont have permissions for payroll, Contact your system administrator! ')
		end;
		;ReportsForNavPre;
	end;
	var
		UserSetup: Record "User Setup";
		StrName: Text[100];
		prPeriodTransactions: Record "prPeriod Transactions.";
		periods: Date;
		info: Record "Company Information";
		CompName: Text[50];
		Addr1: Text[50];
		Addr2: Text[50];
		Email: Text[50];
		NetPay: Decimal;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport51516534_v6_3_0_2259;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet Path;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
