#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0424, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2259")
    {
        type(ForNav.Report_6_3_0_2259; ForNavReport51516326_v6_3_0_2259) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 51516326 "notice1"
{
    RDLCLayout = './Layouts/notice1.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(loan; "Loans Register")
        {
            RequestFilterFields = "Client Code";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(LoanNo_loan; loan."Loan  No.")
            {
            }
            column(ApplicationDate_loan; loan."Application Date")
            {
            }
            column(LoanProductType_loan; loan."Loan Product Type")
            {
            }
            column(ClientCode_loan; loan."Client Code")
            {
            }
            column(ApprovedAmount_loan; loan."Approved Amount")
            {
            }
            column(Interest_loan; loan.Interest)
            {
            }
            column(ClientName_loan; loan."Client Name")
            {
            }
            column(IssuedDate_loan; loan."Issued Date")
            {
            }
            column(Installments_loan; loan.Installments)
            {
            }
            column(OutstandingBalance_loan; loan."Outstanding Balance")
            {
            }
            column(InterestDue_loan; loan."Interest Due")
            {
            }
            column(InterestPaid_loan; loan."Interest Paid")
            {
            }
            column(COMPNAME; COMPINFO.Name)
            {
            }
            column(COMPADDRESS; COMPINFO.Address)
            {
            }
            column(COMPPHONE; COMPINFO."Phone No.")
            {
            }
            column(CurrentShares_loan; loan."Current Shares")
            {
            }
            column(TOTALOUTINT; totalbalance)
            {
            }
            column(Contract_loan; loan.Contract)
            {
            }
            column(OustandingInterest_loan; loan."Oustanding Interest")
            {
            }
            column(DATE; DATE)
            {
            }
            dataitem(Customer; Customer)
            {
                DataItemLink = "No." = field("Client Code");
                column(ReportForNavId_22; 22) { } // Autogenerated by ForNav - Do not delete
                column(Contact_MembersRegister; Customer.Contact)
                {
                }
                column(PhoneNo_MembersRegister; Customer."Phone No.")
                {
                }
            }
            dataitem("Loans Guarantee Details"; "Loans Guarantee Details")
            {
                DataItemLink = "Loan No" = field("Loan  No.");
                column(ReportForNavId_26; 26) { } // Autogenerated by ForNav - Do not delete
                column(MemberNo_LoansGuaranteeDetails; "Loans Guarantee Details"."Member No")
                {
                }
                column(LoanNo_LoansGuaranteeDetails; "Loans Guarantee Details"."Loan No")
                {
                }
                column(Name_LoansGuaranteeDetails; "Loans Guarantee Details".Name)
                {
                }
                column(LoaneesName_LoansGuaranteeDetails; "Loans Guarantee Details"."Loanees  Name")
                {
                }
                column(no; runngnig)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    // count:=count+1;
                    runngnig := runngnig + 1;
                end;

            }
            trigger OnAfterGetRecord();
            begin
                totalbalance := 0;
                loanr.Reset;
                loanr.SetRange(loanr."Loan  No.", loanr."Loan  No.");
                if loanr.Find('-') then begin
                    loanr.CalcFields(loanr."Outstanding Balance", loanr."Interest Due");
                    Message(Format(loanr."Outstanding Balance"));
                    totalbalance := loanr."Outstanding Balance" + loanr."Interest Due";
                end;
                DATE := Today;
                ///count//:=count+1;
            end;

        }
    }

    requestpage
    {


        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        COMPINFO: Record "Company Information";
        totalbalance: Decimal;
        loanr: Record "Loans Register";
        DATE: Date;
        "count": Integer;
        runngnig: Integer;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport51516326_v6_3_0_2259;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2259\ForNav.Reports.6.3.0.2259.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2259.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2259 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
